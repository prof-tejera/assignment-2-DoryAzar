{"version":3,"sources":["components/generic/Container/Container.js","components/documentation/DocumentComponent.js","components/generic/Display/Display.js","components/generic/Button/Button.js","components/generic/Input/Input.js","components/generic/Tabs/Tabs.js","components/generic/Card/Card.js","components/generic/Panel/Panel.js","components/generic/Timer.js","views/DocumentationView.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","utils/helpers.js","views/TimersView.js","App.js","index.js"],"names":["Container","children","this","props","className","Component","Section","styled","div","Article","Title","RenderComponent","Documentation","table","DocumentComponent","title","component","propDocs","map","doc","index","prop","description","type","defaultValue","Display","isStarted","value","status","Button","id","isIconButton","iconName","classifiers","iconVisible","buttonAttributes","buttonStyle","iconVisibility","class","name","Input","handleChange","e","setState","target","onChange","state","label","placeholder","inputAttributes","Tabs","tabSelected","tabItems","length","tabItem","checked","htmlFor","Card","side","cardStyle","Panel","Timer","toggleCount","timerCounting","flipSide","isFrontSide","card","document","querySelector","classList","toggle","saveSettings","console","log","reset","counter","startTime","statusMessage","settings","onClick","setting","flip","StopWatch","Countdown","XY","Tabata","getTimer","timerName","arr","find","timer","C","TimersView","v","selectedTimer","keyName","timers","Stopwatch","item","utils","App","to","path","DocumentationView","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.02dd2885.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Container.css';\n\nclass Container extends Component {\n  render() {\n    \n    const { children }  = this.props;\n    return <div className=\"container\">{children}</div>;\n  }\n}\n\nContainer.propTypes  = {\n  children: PropTypes.node\n}\n\nexport default Container;","import { Component } from \"react\";\nimport styled from \"styled-components\";\n\n\nconst Section = styled.div`\n  width: 90%;\n  margin: 2rem;\n  min-width: 35rem;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  margin-bottom: 10rem;\n\n`;\n\nconst Article = styled.div`\n  width: 100%;\n  height: 100%;\n  border-radius: 3rem;\n  box-shadow: 0.8rem 0.8rem 1.4rem var(--bgLight-2), -0.2rem -0.2rem 1.8rem var(--tint);\n  transition: transform 1s;\n  transform-style: preserve-3d;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  padding: 2rem;\n`;\n\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 2rem;\n`;\n\nconst RenderComponent = styled.div`\n  margin: 4rem 0;\n`;\n\nconst Documentation = styled.table``;\n\nclass DocumentComponent extends Component {\n  render() {\n    return (\n      <Section>\n            <Title>{this.props.title}</Title>\n            <RenderComponent>{this.props.component}</RenderComponent>\n            <Article>\n              <Documentation>\n                <tbody>\n                <tr key={1}>\n                  <th>Prop</th>\n                  <th>Description</th>\n                  <th>Type</th>\n                  <th>Default value</th>\n                </tr>\n                {this.props.propDocs.map((doc, index) => {\n                  return (\n                    <tr key={index}>\n                      <td>{doc.prop}</td>\n                      <td>{doc.description}</td>\n                      <td>{doc.type}</td>\n                      <td>\n                        <code>{doc.defaultValue}</code>\n                      </td>\n                    </tr>\n                  );\n                })}\n                </tbody>\n              </Documentation>\n            </Article>\n      </Section>\n    );\n  }\n}\n\nexport default DocumentComponent;\n","import { Component } from 'react';\nimport './Display.css';\nimport PropTypes from 'prop-types';\n\n\nclass Display extends Component {\n\n\trender() {\n\n\t\tconst {isStarted = false, value = \"00:00:00\", status = \"\" } = this.props;\n\t\t\n        return (\n\n            // Return is stylized circular display\n            <div className=\"display_circular\">\n                <div className=\"marker\">\n                    { status && <p className=\"header\">{ status }</p>}\n                    <p className=\"value neonText\">{ value }</p>\n                </div>\n            \n                { \n                    // Animate if timer is on\n                    !!isStarted && \n                        <>\n                            <div className=\"display_circular_back-1\"></div>\n                            <div className=\"display_circular_back-2\"></div>\n                        </>\n                }\n            </div>\n\n        );\n\t}\n}\n\nDisplay.propTypes = {\n\tisStarted: PropTypes.bool,\n    value: PropTypes.string,\n    status: PropTypes.string\n}\n\n\nexport default Display;\n","import { Component } from 'react';\nimport './Button.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass Button extends Component {\n\n  render() {\n    \n\t\tconst { \n                id,\n                value = \"\",\n                isIconButton = false, \n                iconName = \"\", \n                classifiers = \"btn_primary\", \n                iconVisible = true,\n                children, \n                ...buttonAttributes} = this.props;\n\t\t\n        const buttonStyle = [{\n            \"icon_btn\": isIconButton,\n            \"btn\": !isIconButton\n        }];\n\n        const iconVisibility = [{\n            \"show\": iconVisible,\n            \"hide\": !iconVisible\n        }];\n        \n\t\treturn (   \n\n            // Returns a stylized text or icon button\n            <div id={id} value={value} className={className(buttonStyle, classifiers)} { ...buttonAttributes} >\n                { isIconButton && \n                    <ion-icon value={value} class={className(iconVisibility)} name={iconName}></ion-icon>\n                }\n                {!isIconButton && children}\n            </div>\n\t\t);\n\t}\n}\n\nButton.propTypes = {\n    id: PropTypes.string,\n    value: PropTypes.string,\n    isIconButton:  PropTypes.bool,\n    iconName: PropTypes.string,\n    classifiers: PropTypes.string,\n    iconVisible: PropTypes.bool,\n\tonClick: PropTypes.func.isRequired\n}\n\nexport default Button;\n","import { Component } from 'react';\nimport './Input.css';\nimport PropTypes from 'prop-types';\n\nclass Input extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: props.value?? \"\"\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState(() => {\n            return {\n                value: e.target.value \n            };\n        });\n        if (this.props.onChange) this.props.onChange(e);\n    }\n\n    render() {\n        const { label, placeholder, ...inputAttributes } = this.props;\n        return (\n            <>\n            {label && \n                <fieldset>\n                    <label className=\"settings-label\" >{label}</label>\n                    <input  {...inputAttributes} value={this.state.value} placeholder={placeholder} onChange={this.handleChange} />\n                </fieldset>\n            }\n            </>\n        );\n    }\n\n}\n\nInput.propTypes = {\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func\n}\n\nexport default Input;","import { Component } from 'react';\nimport { Fragment } from 'react';\nimport './Tabs.css';\nimport PropTypes from 'prop-types';\n\nclass Tabs extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            tabSelected: props.tabItems? props.tabItems[0] : \"\"\n        }\n    }\n\n    handleChange =  (e) => {\n        const value = e.target.value || this.state.tabSelected;\n        this.setState(() => { \n            return {\n                tabSelected: value\n            }\n        });\n        if (this.props.onChange) this.props.onChange(e.target.value);\n    }\n    \n    render() {\n\n        const { tabItems = []  } = this.props;\n\n        return  (\n            <div className=\"btn_bar\">\n                <div className=\"tab_control\">\n                    { tabItems.length <= 4 && tabItems.map((tabItem, index) =>\n                        <Fragment key={index}>\n                            <input  type=\"radio\" \n                                    name={\"radio\" + (index + 1)} \n                                    value={tabItem} \n                                    id={\"tab-\" + (index + 1)} \n                                    checked={this.state.tabSelected === tabItem} \n                                    onChange={this.handleChange}\n                            />\n                            <label htmlFor={\"tab-\" + (index + 1)} \n                                    className={\"tab_control_\" + (index+1)}>\n                                <p>{tabItem}</p>\n                            </label>\n                        </Fragment>\n                    )}\n                    <div className=\"tab_control_color\"></div>\n                </div>\n            </div>\n        )\n\n\n    }\n\n}\n\n\nTabs.propTypes = {\n    tabItems: PropTypes.arrayOf(PropTypes.string),\n    onChange: PropTypes.func\n}\n\nexport default Tabs;","import React, { Component } from 'react';\nimport './Card.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass Card extends Component {\n\n    render() {\n        const { side =\"front\", children } = this.props;\n\n        const cardStyle = [{\n            [`panel_face_${side}`]: side? true : false\n        }]\n\n        return (\n            <div className={className(cardStyle)}>\n                { children }\n            </div>\n        );\n    }\n    \n}\n\nCard.propTypes = {\n    side: PropTypes.string,\n    children: PropTypes.node\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport './Panel.css';\nimport PropTypes from 'prop-types';\n\nclass Panel extends Component {\n  render() {\n    \n    const { id = \"\", children }  = this.props;\n\n    \n    return (\n        <div className=\"panel\">\n            <div className=\"panel_inner\" id={id}>\n                {children}\n            </div>\n        </div>\n    );\n  }\n}\n\nPanel.propTypes  = {\n  id: PropTypes.string,\n  children: PropTypes.node\n}\n\nexport default Panel;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from \"./Card/Card\";\nimport Display from \"./Display/Display\";\nimport Input from \"./Input/Input\";\nimport Button  from \"./Button/Button\";\n\nclass Timer extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timerCounting: false,\n      isFrontSide: true,\n      statusMessage: props.statusMessage || \"\",\n      counter: props.startTime || \"00:00:00\"\n    };\n  }\n\n  // Toggle the counter and hand-off to parent timer\n  toggleCount = (e) => {\n    this.setState(({ timerCounting }) => {\n      return {\n        timerCounting: !timerCounting\n      };\n    });\n    if (this.props.onChange) this.props.onChange(e);\n  } \n\n  // Flips the card to display settings\n  flipSide = () => {\n    this.setState(({ isFrontSide }) => {\n      return {\n        isFrontSide: !isFrontSide\n      };\n    });\n    const card = document.querySelector(\"#timer_panel\");\n    if (card) card.classList.toggle('is-flipped');\n  }\n\n  // Save settings\n  saveSettings  = (e) => {\n    console.log(e.target);\n  }\n\n  // Reset the counter\n  reset = (e) => {\n    this.setState(() => {\n      return {\n        counter: this.props.startTime || \"00:00:00\"\n      };\n    });\n    console.log(\"reset\");\n  }\n\n  render() {\n    \n    const { settings = null } = this.props; \n\n    return (\n      <>\n        <Card side=\"front\">\n          <Display isStarted={this.state.timerCounting} \n                   status = { this.state.statusMessage}\n                   value={this.state.counter} />\n\n          <div className=\"btn_bar\">\n              {this.state.timerCounting &&\n                    <Button \n                        id = \"pause_btn\"\n                        value=\"pause\"\n                        classifiers=\"primary\" \n                        isIconButton={true} \n                        onClick={this.toggleCount} \n                        iconName=\"pause\"\n                    />\n              }\n              {!this.state.timerCounting && \n                    <Button \n                        id = \"start_btn\"\n                        value=\"start\"\n                        classifiers=\"primary\" \n                        isIconButton={true} \n                        onClick={this.toggleCount} \n                        iconName=\"play\"\n                    />\n              \n              }\n\n              <Button \n                id = \"reset_btn\"\n                value=\"reset\"\n                classifiers = \"primary\"\n                isIconButton = {true}\n                onClick={this.reset}\n                iconName=\"refresh-outline\"\n              />\n            \n              {settings && <Button \n                id = \"settings_btn\"\n                value=\"settings\"\n                classifiers = \"secondary\"\n                isIconButton = {true}\n                onClick={this.flipSide}\n                iconName=\"settings\"\n              />}\n          </div>\n        </Card>\n        <Card side=\"back\">\n              <h1>Settings</h1>\n              {settings && \n                <div className=\"settings-form\">\n                    {settings.map((setting, index) =>  \n                        <Input key={index} \n                               label={setting.label} \n                                placeholder={setting.placeholder} \n                                value={setting.value} \n                                id={`settings${index}`}\n                        />)\n                    }\n                </div>\n                }\n              <div className=\"btn_bar\">\n                <Button \n                    id = \"back_btn\"\n                    value=\"back\"\n                    isIconButton = {true}\n                    onClick={this.flipSide}\n                    iconName=\"arrow-back-outline\"\n                />\n                <Button onClick={this.saveSettings}>\n                  Save\n                </Button>\n              </div>\n        </Card>\n      </>\n    );\n  }\n}\n\nTimer.propTypes = {\n  settings: PropTypes.array,\n  statusMessage: PropTypes.string,\n  startTime: PropTypes.string,\n  onChange: PropTypes.func\n}\n\nexport default Timer;\n","import { Component } from 'react';\nimport styled from \"styled-components\";\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\nimport Display from \"../components/generic/Display/Display\";\nimport Button from \"../components/generic/Button/Button\";\nimport Input from \"../components/generic/Input/Input\";\nimport Tabs from \"../components/generic/Tabs/Tabs\";\nimport Card from \"../components/generic/Card/Card\";\nimport Panel from \"../components/generic/Panel/Panel\";\nimport Timer from \"../components/generic/Timer\";\n\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\nclass Documentation extends Component {\n\n  flip = () => {\n    const card = document.querySelector(\"#testcard\");\n    if (card) card.classList.toggle('is-flipped');\n  }\n\n  render() {\n    return (\n        <>\n          <Title>Documentation</Title>\n\n\n          <DocumentComponent\n            title=\"Generic Timer\"\n            component={<Panel><Timer /></Panel>}\n            propDocs={[\n              {\n                prop: \"settings\",\n                description: \"Collection that defines the allowed settings for a timer\",\n                type: \"array of objects - [{label: 'label1', value: 'value1', placeholder: 'placeholder1'}, {...}]\",\n                defaultValue: \"Optional. Default: []\",\n              },\n              {\n                prop: \"statusMessage\",\n                description: \"Status message that can be used for rounds/rest\",\n                type: \"string\",\n                defaultValue: \"Optional. Default: None\",\n              },\n              {\n                prop: \"startTime\",\n                description: \"Starting time for the timer\",\n                type: \"string\",\n                defaultValue: \"Optional. Default: 00:00:00\",\n              },\n              {\n                prop: \"onChange\",\n                description: \"Event handler for capturing values input on change\",\n                type: \"function\",\n                defaultValue: \"Optional. Default: None\",\n              }\n\n            ]}\n          />   \n\n          <DocumentComponent\n            title=\"Circular Display \"\n            component={<Display isStarted={true} status=\"Status Text\" value=\"00:10:00\" />}\n            propDocs={[\n              {\n                prop: \"isStarted\",\n                description: \"Animates the circular display\",\n                type: \"bool\",\n                defaultValue: \"Optional. Default: false\",\n              },\n              {\n                prop: \"status\",\n                description: \"Status message that can be used for rounds/rest\",\n                type: \"string\",\n                defaultValue: \"Optional. Default: None\",\n              },\n              {\n                prop: \"value\",\n                description: \"Value to be displayed\",\n                type: \"string\",\n                defaultValue: \"Optional. Default: 00:00:00\",\n              }\n            ]}\n          />    \n\n          <DocumentComponent\n            title=\"Button \"\n            component={<Button onClick={() => console.log(\"test\")}>Text Button</Button>}\n            propDocs={[\n              {\n                prop: \"id\",\n                description: \"Identifier for the button\",\n                type: \"string\",\n                defaultValue: \"Optional. Default: None\",\n              },\n              {\n                prop: \"value\",\n                description: \"Identifier for the action useful to identify the event\",\n                type: \"string\",\n                defaultValue: \"Optional. Default: None\"\n              },\n              {\n                prop: \"isIconButton\",\n                description: \"Creates an icon button\",\n                type: \"boolean\",\n                defaultValue: \"Optional. Default: false\"\n              },\n              {\n                prop: \"iconName\",\n                description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n                type: \"string\",\n                defaultValue: \"Optional. Default: None\"\n              },\n              {\n                prop: \"iconVisible\",\n                description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n                type: \"bool\",\n                defaultValue: \"Optional. Default: true\"\n              },\n              {\n                prop: \"classifiers\",\n                description: \"CSS classes to append additional styles\",\n                type:  \"string\",\n                defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n              },\n              {\n                prop: \"onClick\",\n                description: \"Event handler for clicking on a button\",\n                type:  \"function\",\n                defaultValue:  \"Required. Default: None\"\n              },\n            ]}\n          />\n\n          <DocumentComponent\n            title=\"Button (with Icon configuration)\"\n            component={<Button \n              id = \"settings_btn\"\n              value=\"settings\"\n              classifiers = \"secondary\"\n              isIconButton = {true}\n              onClick={()=>console.log(\"icon button\")}\n              iconName=\"settings\"\n            />}\n            propDocs={[\n              {\n                prop: \"id\",\n                description: \"Identifier for the button\",\n                type: \"string\",\n                defaultValue: \"Optional. Default: None\",\n              },\n              {\n                prop: \"value\",\n                description: \"Identifier for the action useful to identify the event\",\n                type: \"string\",\n                defaultValue: \"Optional. Default: None\"\n              },\n              {\n                prop: \"isIconButton\",\n                description: \"Creates an icon button\",\n                type: \"boolean\",\n                defaultValue: \"Optional. Default: false\"\n              },\n              {\n                prop: \"iconName\",\n                description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n                type: \"string\",\n                defaultValue: \"Optional. Default: None\"\n              },\n              {\n                prop: \"iconVisible\",\n                description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n                type: \"bool\",\n                defaultValue: \"Optional. Default: true\"\n              },\n              {\n                prop: \"classifiers\",\n                description: \"CSS classes to append additional styles\",\n                type:  \"string\",\n                defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n              },\n              {\n                prop: \"onClick\",\n                description: \"Event handler for clicking on a button\",\n                type:  \"function\",\n                defaultValue:  \"Required. Default: None\"\n              },\n            ]}\n          />\n\n          <DocumentComponent\n            title=\"Input \"\n            component={<Input label=\"Test Label\" />}\n            propDocs={[\n              {\n                prop: \"label\",\n                description: \"Label of the input field\",\n                type: \"String\",\n                defaultValue: \"Required. Default: None\",\n              },\n              {\n                prop: \"value\",\n                description: \"Initial value passed to the input\",\n                type: \"String\",\n                defaultValue: \"Optional. Default: None\",\n              },\n              {\n                prop: \"placeholder\",\n                description: \"Input placeholder text\",\n                type: \"String\",\n                defaultValue: \"Optional. Default: None\",\n              },\n              {\n                prop: \"onChange\",\n                description: \"Event handler for capturing keyboard inputs\",\n                type:  \"function\",\n                defaultValue:  \"Optional. Default: None\"\n              }\n\n\n            ]}\n          />    \n\n          <DocumentComponent\n            title=\"Tabs \"\n            component={<Tabs tabItems={[\"Tab 1\", \"Tab 2\", \"Tab 3\", \"Tab 4\"]} />}\n            propDocs={[\n              {\n                prop: \"tabItems\",\n                description: \"Array of tab labels. Max 4 tabs. If more, the control will not render\",\n                type: \"Array of strings\",\n                defaultValue: \"Optional. Default: []\",\n              },\n              {\n                prop: \"onChange\",\n                description: \"Event handler for capturing the selected tab\",\n                type: \"function\",\n                defaultValue: \"Optional. Default: None\",\n              }\n            ]}\n          />    \n\n          <DocumentComponent\n            title=\"Card \"\n            component={\n              <Panel id=\"testcard\">\n                <Card side=\"front\">\n                  front side\n                  <Button onClick={this.flip}>Flip</Button>\n                </Card>\n                <Card side=\"back\">\n                  back side\n                  <Button onClick={this.flip}>Flip Again</Button>\n                </Card>\n              </Panel>}\n            propDocs={[\n              {\n                prop: \"side\",\n                description: `Card container that flips using css. \n                Two Cards (front and back) need to be defined in order for flipping to work`,\n                type: \"string\",\n                defaultValue: \"Optional. Default: 'front'. Possible values: 'front' |  'back'\",\n              },\n              {\n                prop: \"Children Nodes\",\n                description: `Accepts any React and HTML valid nodes. \n                An event within a child element of the card could trigger the flipping.\n                The event handler should query the id of Panel container and apply toggle('is-flipped') to\n                the queried element`,\n                type: \"node\",\n                defaultValue: \"Optional. Default: None\",\n              }\n            ]}\n          /> \n\n          <DocumentComponent\n            title=\"Panel \"\n            component={<Panel >Content goes here</Panel>}\n            propDocs={[\n              {\n                prop: \"id\",\n                description: \"Identifier for the panel that will allow flipping the cards\",\n                type: \"string\",\n                defaultValue: \"Optional. Default: None\",\n              },\n              {\n                prop: \"Children Nodes\",\n                description: \"Accepts any React and HTML valid nodes\",\n                type: \"node\",\n                defaultValue: \"Optional. Default: None\",\n              }\n            ]}\n          />\n\n          <DocumentComponent\n            title=\"Container \"\n            component=\"Generic Empty Container\"\n            propDocs={[\n              {\n                prop: \"Children Nodes\",\n                description: \"Accepts any React and HTML valid nodes\",\n                type: \"node\",\n                defaultValue: \"Optional. Default: None\",\n              }\n            ]}\n          />           \n\n\n        </>\n    );\n  }\n}\n\nexport default Documentation;\n","import { Component } from 'react';\nimport Timer from \"../generic/Timer\";\n\nconst settings = [\n  {label: \"Start Time\", value: \"00:00:00\", placeholder: \"Start the timer at this time\"},\n  {label: \"Stop Time\", value: \"00:30:00\", placeholder: \"Stop the timer at this time\"}\n];\n\nclass StopWatch extends Component {\n  render() {\n\n    return <Timer statusMessage=\"Count to 00:30:00\" settings={settings} />;\n  }\n}\n\nexport default StopWatch;\n","import { Component } from 'react';\nimport Timer from \"../generic/Timer\";\n\nconst settings = [\n  {label: \"Start Time\", value: \"00:30:00\", placeholder: \"Start the timer at this time\"},\n  {label: \"Stop Time\", value:\"00:10:00\", placeholder: \"Stop the timer at this time\"},\n  {label: \"Another setting\", placeholder: \"TBD\"}\n];\n\nclass Countdown extends Component {\n  render() {\n\n    return <Timer statusMessage=\"Count from 00:30:00\"  startTime=\"00:30:00\" settings={settings} />;\n  }\n}\n\nexport default Countdown;\n","import { Component } from 'react';\nimport Timer from \"../generic/Timer\";\n\nconst settings = [\n  {label: \"Start Time\", value: \"00:20:10\", placeholder: \"Start the timer at this time\"},\n  {label: \"Stop Time\", value:\"00:00:00\", placeholder: \"Stop the timer at this time\"},\n  {label: \"Rounds\", value:\"2\", placeholder: \"Stops after that many rounds\"}\n];\n\nclass XY extends Component {\n  render() {\n    return <Timer statusMessage=\"Round 1 of 2\" startTime=\"00:20:10\" settings={settings} />;\n  }\n}\n\nexport default XY;","import { Component } from 'react';\nimport Timer from \"../generic/Timer\";\n\nconst settings = [\n  {label: \"Work Time\", value: \"00:45:00\", placeholder: \"Start the timer at this time\"},\n  {label: \"Rest Time\", value:\"00:10:00\", placeholder: \"Timer will rest for that duration\"},\n  {label: \"Rounds\", value:\"2\", placeholder: \"Stops after that many rounds\"}\n];\n\nclass Tabata extends Component {\n  render() {\n    return <Timer statusMessage=\"Work - Round 1 of 2\" startTime=\"00:45:00\" settings={settings} />;\n  }\n}\n\nexport default Tabata;","// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\n\nexport function readCollection(arr, keyName)  {\n    return arr.map((item) => {\n        return item[keyName];\n    });\n}\n\n\n\nexport function getTimer(timerName, arr)  {\n    function isTimer(timer) {\n        return timer.title === timerName;\n    }\n    return arr.find((isTimer)).C;\n}\n","import { Component } from 'react';\n\nimport Tabs  from \"../components/generic/Tabs/Tabs\";\nimport Panel from \"../components/generic/Panel/Panel\";\n\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\nimport * as utils from '../utils/helpers.js';\n\nclass TimersView extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state  = {\n      selectedTimer: \"Stopwatch\"\n    }\n  }\n\n  handleChange =  (v) => {\n    this.setState({selectedTimer: v});\n  }\n\n  render() {\n    const timers = [\n      { title: \"Stopwatch\", C: <Stopwatch /> },\n      { title: \"Countdown\", C: <Countdown /> },\n      { title: \"XY\", C: <XY /> },\n      { title: \"Tabata\", C: <Tabata /> },\n    ];\n\n    return (\n      <>\n        <Tabs tabItems={utils.readCollection(timers, 'title')} \n              onChange={this.handleChange} />\n        <Panel id=\"timer_panel\">\n          {utils.getTimer(this.state.selectedTimer, timers)}\n        </Panel>\n      </>\n  \n    );\n  }\n}\n\nexport default TimersView;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Container from \"./components/generic/Container/Container\";\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\n\n\nfunction App() {\n  return (\n      <Router>\n        <nav className=\"navigation\">\n            <ul>\n              <li key={1}>\n                <Link to=\"/\">Timers</Link>\n              </li>\n              <li key={2}>\n                <Link to=\"/docs\">Documentation</Link>\n              </li>\n            </ul>\n          </nav>\n          <br />\n        <Container>\n          <Switch>\n              <Route path=\"/docs\">\n                <DocumentationView />\n              </Route>\n              <Route path=\"/\">\n                <TimersView />\n              </Route>\n            </Switch>\n        </Container>\n      </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}