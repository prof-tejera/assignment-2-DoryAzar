{"version":3,"sources":["utils/helpers.js","platform/SettingsProvider.js","platform/TimerProvider.js","components/generic/Container/Container.js","components/documentation/DocumentComponent.js","components/generic/Display/Display.js","components/generic/Button/Button.js","components/generic/Input/Input.js","components/generic/Tabs/Tabs.js","components/generic/Card/Card.js","components/generic/Panel/Panel.js","components/generic/Timer.js","views/DocumentationView.js","hooks/useTimer.js","hooks/timerhooks.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","views/TimersView.js","App.js","index.js"],"names":["getTimer","timerName","arr","find","timer","title","C","formatTime","seconds","slice","fetchedMinutes","Math","floor","minutes","hours","T_STOPWATCH","T_COUNTDOWN","T_TABATA","WORK_MODE","REST_MODE","TIMER_SETTINGS","timers","SettingsContext","React","createContext","SettingsProvider","children","useState","selectedTimer","setSelectedTimer","startTime","setStartTime","stopTime","setStopTime","totalRounds","setTotalRounds","restStartTime","setRestStartTime","Provider","value","getSettings","setSettings","settings","dispatchSettings","inputSettings","schema","forEach","setting","input","document","querySelector","id","TimerContext","TimerProvider","useContext","settingsContext","statusMessage","setStatusMessage","timerCounting","setTimerCounting","counter","setCounter","currentRound","setCurrentRound","mode","setMode","isFrontSide","setIsFrontSide","isComplete","setToComplete","startCounting","resetTimer","resetMode","toggleCounting","toggleSide","isTimerOver","startTimer","setInterval","setTimeout","pauseTimer","interval","clearInterval","completeTimer","messenger","duration","abs","remaining","elapsed","includes","Container","className","Section","styled","div","Article","Title","RenderComponent","Documentation","table","DocumentComponent","component","propDocs","map","doc","index","prop","description","type","defaultValue","Display","successStyle","useEffect","utils","Button","props","isIconButton","iconName","classifiers","iconVisible","buttonAttributes","buttonStyle","iconVisibility","class","name","Input","label","placeholder","inputAttributes","setValue","onChange","e","target","Tabs","tabItems","tabSelected","handleChange","length","tabItem","checked","htmlFor","Card","side","cardStyle","Panel","Timer","context","playButtonStyle","flipSide","card","classList","toggle","onClick","flip","isStarted","status","console","log","useTimer","useTimerInitializer","runningTimer","useRef","current","useTimerStarter","StopWatch","Countdown","XY","Tabata","TimersView","keyName","Stopwatch","item","v","App","to","path","DocumentationView","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ffabded1.chunk.js","sourcesContent":["// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\nimport timers from '../utils/timers.json';\n\nexport const readCollection = (arr, keyName) => {\n    return arr.map((item) => {\n        return item[keyName];\n    });\n}\n\nexport const getTimer = (timerName, arr) =>  {\n    function isTimer(timer) {\n        return timer.title === timerName;\n    }\n    return arr.find((isTimer)).C;\n}\n\nconst isMatch = (setting, value) => {\n    return setting.id === value; \n}\n\nexport const getSetting = (value, settings) => {\n    const match = settings.find((setting) => isMatch(setting, value));\n    return match.value;\n}\n\nexport const formatTime = (timer) => {\n    const seconds = `0${(timer % 60)}`.slice(-2)\n    const fetchedMinutes = `${Math.floor(timer / 60)}`\n    const minutes = `0${fetchedMinutes % 60}`.slice(-2)\n    const hours = `0${Math.floor(timer / 3600)}`.slice(-2)\n  \n    return `${hours}:${minutes}:${seconds}`\n}\n\nexport const T_STOPWATCH = \"Stopwatch\";\nexport const T_COUNTDOWN = \"Countdown\";\nexport const T_TABATA = \"Tabata\";\nexport const T_XY = \"XY\";\nexport const WORK_MODE = \"Work\";\nexport const REST_MODE = \"Rest\";\n\nexport const TIMER_SETTINGS = timers;","import React, { useState } from 'react';\nimport { TIMER_SETTINGS, T_STOPWATCH } from '../utils/helpers';\n\nexport const SettingsContext = React.createContext({});\n\n\nexport const SettingsProvider = ({ children }) => {\n\n    const [selectedTimer, setSelectedTimer]  = useState(T_STOPWATCH);\n    const [startTime, setStartTime] = useState(0);\n    const [stopTime, setStopTime] = useState(0);\n    const [totalRounds, setTotalRounds] = useState(1);\n    const [restStartTime, setRestStartTime] = useState(0);\n\n    const getSettings = () => {\n        return {startTime, stopTime, totalRounds, restStartTime};\n    }\n\n    const setSettings = (settings) =>  {\n        setStartTime(settings.startTime?? startTime);\n        setStopTime(settings.stopTime?? 0);\n        setTotalRounds(settings.totalRounds?? 1);\n        setRestStartTime(settings.restStartTime?? startTime);\n        return settings;\n    }\n\n\n    const dispatchSettings  = (inputSettings)  =>  {\n        const settings = TIMER_SETTINGS.schema[selectedTimer];\n        settings.forEach((setting) => {\n            const input = document.querySelector(`#${setting.id}`);\n            if (input) input.value = inputSettings[setting.id];\n        });\n        return inputSettings;\n      }\n \n    return <SettingsContext.Provider \n            value={{ \n                selectedTimer, setSelectedTimer,\n                startTime, setStartTime,\n                stopTime, setStopTime,\n                totalRounds, setTotalRounds,\n                restStartTime, setRestStartTime,\n                getSettings, setSettings,\n                dispatchSettings\n            }}>\n            {children}\n        </SettingsContext.Provider>;\n};\n\nexport default SettingsProvider;","import React, { useState, useContext } from 'react';\nimport { T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA, WORK_MODE, REST_MODE, formatTime } from '../utils/helpers';\nimport { SettingsContext } from './SettingsProvider';\nexport const TimerContext = React.createContext({});\n\nexport const TimerProvider = ({ children }) => {\n\n    // Fetch content from Settings Provider\n    const { ...settingsContext } = useContext(SettingsContext);\n    const { \n        selectedTimer,\n        startTime,\n        stopTime,\n        restStartTime,\n        totalRounds } = settingsContext;\n\n    const [statusMessage, setStatusMessage] = useState(\"\");\n    const [timerCounting, setTimerCounting] =  useState(false);\n    const [counter, setCounter] = useState(startTime);\n    const [currentRound, setCurrentRound] = useState(1);\n    const [mode, setMode] = useState(WORK_MODE);\n    const [isFrontSide, setIsFrontSide] = useState(true);\n    const [isComplete, setToComplete] = useState(false);\n\n    // private function: start the counter\n    const startCounting =  () => {\n        switch(selectedTimer) {\n            case T_STOPWATCH:\n                setCounter((counter) => counter + 1);\n                break;\n            case T_TABATA:\n                setCounter((counter) => counter - 1);\n                if (counter === 0 && mode === REST_MODE) {\n                    resetTimer(false);\n                    setMode(WORK_MODE);\n                    setCurrentRound((currentRound) => currentRound + 1);\n                } else if (counter === 0 && mode === WORK_MODE) {\n                    resetTimer(false);\n                    setMode(REST_MODE);\n                }\n                break;\n            default:\n                setCounter((counter) => counter - 1);\n                if (counter === 0) {\n                    resetTimer(false);\n                    setCurrentRound((currentRound) => currentRound + 1);\n                }\n\n        }\n    }\n\n    // Start the timer\n    const startTimer = () => {\n        setToComplete(false);\n        \n        // counting up\n        if (T_STOPWATCH) \n            return setInterval(() => {\n                startCounting();\n            }, 1000);\n\n        // counting down can be done with timeout\n        else \n            return setTimeout(() => {\n                startCounting();\n            }, startTime)\n    }\n\n    // Pause the timer\n    const pauseTimer = (interval) => {\n        clearInterval(interval);\n    }\n\n    // Reset the timer\n    const resetTimer = (resetMode = true) => {\n        setCounter(mode === WORK_MODE? startTime : restStartTime);\n        if (!!resetMode) {\n            setToComplete(false);\n            setMode(WORK_MODE); \n            setCurrentRound(1);\n        }\n    }\n\n    // End the timer\n    const completeTimer = (interval) => {\n        clearInterval(interval);\n        toggleCounting();\n        setCounter(stopTime);\n        setCurrentRound(totalRounds);\n        setMode(WORK_MODE);\n        setToComplete(true);\n        return true;\n    }\n\n    // Toggle timer on, off\n    const toggleCounting  = () => {\n        setTimerCounting(!timerCounting);\n    }\n\n    // Toggle between timer and settings card\n    const toggleSide = () => {\n        if (!isFrontSide) resetTimer();\n        setIsFrontSide(!isFrontSide);\n    }\n\n\n    // Check if the timer completed\n    const isTimerOver = () =>  {\n        \n        // countdown\n        if (startTime >= stopTime) \n            return  timerCounting && counter <= stopTime && currentRound === totalRounds  \n            && (selectedTimer === T_TABATA? mode === REST_MODE : true);\n        \n        // countup\n        else\n            return  timerCounting && counter >= stopTime && currentRound === totalRounds;\n    }\n\n    // Conversation handler\n    const messenger = () => {\n        const duration = Math.abs(startTime - stopTime);\n        const remaining =  Math.abs(counter - duration);\n        const elapsed = Math.abs((remaining - duration)/ duration);\n\n        if (mode === REST_MODE && (counter === startTime + 1 || counter === startTime - 1)) return \"Breathe...\";\n        if (mode === WORK_MODE && (counter === startTime + 1 || counter === startTime - 1)) return \"Let's move that body!\";\n        if (isComplete)  return \"You made it! Again?\";  \n        if (!timerCounting && counter !== startTime && counter !== stopTime ) return \"Let's take a breath...\";\n        if (duration >= 10 && elapsed < 0.2) return \"Almost There!\";\n        if (duration >=10 && elapsed < 0.4 ) return \"Keep moving...You can do it\";\n        if (selectedTimer === T_XY) return `Round ${currentRound} of ${totalRounds}`;\n        if ([T_STOPWATCH, T_COUNTDOWN].includes(selectedTimer)) return `Counting to ${formatTime(stopTime)}`;\n        if (selectedTimer === T_TABATA) return `${mode} -  Round ${currentRound} of ${totalRounds}`;\n    }\n\n    return <TimerContext.Provider \n            value={{ \n                currentRound, setCurrentRound,\n                mode, setMode,\n                statusMessage, setStatusMessage, \n                timerCounting, toggleCounting, setTimerCounting,\n                counter, setCounter,\n                isFrontSide, toggleSide,\n                isComplete, setToComplete,\n                isTimerOver, startTimer, pauseTimer, resetTimer, \n                completeTimer, messenger, \n                ...settingsContext\n\n            }}>\n            {children}\n        </TimerContext.Provider>;\n};\n\nexport default TimerProvider;","import PropTypes from 'prop-types';\nimport './Container.css';\n\nconst Container = ({...props}) => {\n  const { children }  = props;\n  return <div className=\"container\">{children}</div>;\n}\n\n\nContainer.propTypes  = {\n  children: PropTypes.node\n}\n\nexport default Container;","import styled from \"styled-components\";\n\n\nconst Section = styled.div`\n  width: 90%;\n  margin: 2rem;\n  min-width: 35rem;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  margin-bottom: 10rem;\n\n`;\n\nconst Article = styled.div`\n  width: 100%;\n  height: 100%;\n  border-radius: 3rem;\n  box-shadow: 0.8rem 0.8rem 1.4rem var(--bgLight-2), -0.2rem -0.2rem 1.8rem var(--tint);\n  transition: transform 1s;\n  transform-style: preserve-3d;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  padding: 2rem;\n`;\n\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 2rem;\n`;\n\nconst RenderComponent = styled.div`\n  margin: 4rem 0;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = ({title, component, propDocs}) => {\n  return (\n    <Section>\n          <Title>{title}</Title>\n          <RenderComponent>{component}</RenderComponent>\n          <Article>\n            <Documentation>\n              <tbody>\n              <tr key={1}>\n                <th>Prop</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Default value</th>\n              </tr>\n              {propDocs.map((doc, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{doc.prop}</td>\n                    <td>{doc.description}</td>\n                    <td>{doc.type}</td>\n                    <td>\n                      <code>{doc.defaultValue}</code>\n                    </td>\n                  </tr>\n                );\n              })}\n              </tbody>\n            </Documentation>\n          </Article>\n    </Section>\n  );\n}\n\nexport default DocumentComponent;\n","import  { useContext, useEffect } from 'react';\nimport './Display.css';\nimport PropTypes from 'prop-types';\nimport {  TimerContext } from '../../../platform/TimerProvider';\nimport * as utils from \"../../../utils/helpers\";\nimport className from 'classnames';\n\nconst Display = () => {\n    const { counter, timerCounting,  statusMessage, setStatusMessage, messenger, isComplete } = useContext(TimerContext);\n\n    const successStyle = [{\n        \"success\": isComplete\n    }];\n\n    useEffect(() => {\n        setStatusMessage(messenger());\n    }, [setStatusMessage, messenger]);\n\t\t\n    return (\n\n        // Return is stylized circular display\n        <div className=\"display_circular\">\n            <div className=\"marker\">\n                { statusMessage && <p className={className(\"header\", successStyle)}>{ statusMessage }</p>}\n                {!isComplete && <p className={className(\"value neonText\", successStyle)}>{ utils.formatTime(counter) }</p>}\n                {isComplete && <p className={className(\"value neonText\", successStyle)}>Nice!</p>}\n            </div>\n        \n            { \n                // Animate if timer is on\n                !!timerCounting && \n                    <>\n                        <div className=\"display_circular_back-1\"></div>\n                        <div className=\"display_circular_back-2\"></div>\n                    </>\n            }\n        </div>\n\n    );\n}\n\n\nDisplay.propTypes = {\n\tisStarted: PropTypes.bool,\n    value: PropTypes.string,\n    status: PropTypes.string\n}\n\n\nexport default Display;\n","import './Button.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Button =  ({...props}) => {\n    const { \n        id,\n        value = \"\",\n        isIconButton = false, \n        iconName = \"\", \n        classifiers = \"btn_primary\", \n        iconVisible = true,\n        children, \n        ...buttonAttributes} = props; \n\n    const buttonStyle = [{\n        \"icon_btn\": isIconButton,\n        \"btn\": !isIconButton\n    }];\n\n    const iconVisibility = [{\n        \"show\": iconVisible,\n        \"hide\": !iconVisible\n    }];\n\n    return (   \n\n        // Returns a stylized text or icon button\n        <div id={id} value={value} className={className(buttonStyle, classifiers)} { ...buttonAttributes} >\n            { isIconButton && \n                <ion-icon value={value} class={className(iconVisibility)} name={iconName}></ion-icon>\n            }\n            {!isIconButton && children}\n        </div>\n    );\n\n}\n\nButton.propTypes = {\n    id: PropTypes.string,\n    value: PropTypes.string,\n    isIconButton:  PropTypes.bool,\n    iconName: PropTypes.string,\n    classifiers: PropTypes.string,\n    iconVisible: PropTypes.bool,\n\tonClick: PropTypes.func.isRequired\n}\n\nexport default Button;\n","import { useState } from 'react';\nimport './Input.css';\nimport PropTypes from 'prop-types';\n\nconst Input = ({...props}) => {\n\n    const { label, placeholder, ...inputAttributes } = props;\n    const [value, setValue] = useState(props.value ?? \"\");\n\n    const handleChange = (e) => {\n        setValue(e.target.value);\n        if (props.onChange) props.onChange(e);\n    }\n\n    return (\n        <>\n        {label && \n            <fieldset>\n                <label className=\"settings-label\" >{label}</label>\n                <input  {...inputAttributes} value={value} placeholder={placeholder} type=\"number\" onChange={handleChange} />\n            </fieldset>\n        }\n        </>\n    );\n\n}\n\nInput.propTypes = {\n    label: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func\n}\n\nexport default Input;","import { useContext } from 'react';\nimport { TimerContext } from '../../../platform/TimerProvider';\nimport { Fragment } from 'react';\nimport './Tabs.css';\nimport PropTypes from 'prop-types';\n\nconst Tabs = ({ tabItems }) => {\n\n    const {selectedTimer, setSelectedTimer } = useContext(TimerContext);\n    \n    // select tab if included in tab list provided, otherwise select first item in tab list\n    const tabSelected  = tabItems.includes(selectedTimer)? selectedTimer : tabItems[0];\n    \n    const handleChange =  (e) => {\n        const value = e.target.value || tabSelected;\n        setSelectedTimer(value);\n    }\n\n    return  (\n        <div className=\"btn_bar\">\n            <div className=\"tab_control\">\n                { tabItems.length <= 4 && tabItems.map((tabItem, index) =>\n                    <Fragment key={index}>\n                        <input  type=\"radio\" \n                                name={\"radio\" + (index + 1)} \n                                value={tabItem} \n                                id={\"tab-\" + (index + 1)} \n                                checked={tabSelected === tabItem} \n                                onChange={handleChange}\n                        />\n                        <label htmlFor={\"tab-\" + (index + 1)} \n                                className={\"tab_control_\" + (index+1)}>\n                            <p>{tabItem}</p>\n                        </label>\n                    </Fragment>\n                )}\n                <div className=\"tab_control_color\"></div>\n            </div>\n        </div>\n    );\n}\n\n\nTabs.propTypes = {\n    tabItems: PropTypes.arrayOf(PropTypes.string),\n    onChange: PropTypes.func\n}\n\nexport default Tabs;","import './Card.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Card =  ({...props}) => {\n    const { side =\"front\", children } = props;\n\n    const cardStyle = [{\n        [`panel_face_${side}`]: side? true : false\n    }];\n\n    return (\n        <div className={className(cardStyle)}>\n            { children }\n        </div>\n    );\n}\n\nCard.propTypes = {\n    side: PropTypes.string,\n    children: PropTypes.node\n}\n\nexport default Card;","import './Panel.css';\nimport PropTypes from 'prop-types';\n\nconst Panel =  ({...props}) => {\n  const { id = \"\", children }  = props;\n\n  return (\n    <div className=\"panel\">\n        <div className=\"panel_inner\" id={id}>\n            {children}\n        </div>\n    </div>\n  );\n}\n\n\nPanel.propTypes  = {\n  id: PropTypes.string,\n  children: PropTypes.node\n}\n\nexport default Panel;","import { useContext  } from 'react';\nimport {  TimerContext } from '../../platform/TimerProvider';\nimport { TIMER_SETTINGS } from '../../utils/helpers';\nimport PropTypes from 'prop-types';\nimport Card from \"./Card/Card\";\nimport Display from \"./Display/Display\";\nimport Input from \"./Input/Input\";\nimport Button  from \"./Button/Button\";\nimport className from 'classnames';\n\n\nconst Timer = () => {\n\n  const { ...context } = useContext(TimerContext);\n  const { resetTimer, timerCounting, toggleCounting, toggleSide, completeTimer, selectedTimer, isComplete} = context;\n  const settings = TIMER_SETTINGS.schema[selectedTimer];\n\n  const playButtonStyle = [{\n    \"primary\": true,\n    \"disabled\": isComplete\n  }];\n\n\n  // Flips the card to display settings\n  const flipSide = () => {\n      toggleSide();\n      const card = document.querySelector(\"#timer_panel\");\n      if (card) card.classList.toggle('is-flipped');\n  }\n\n  // Save settings\n  const saveSettings  = () => {\n    // const inputSettings = {};\n    // settings.forEach((setting) => {\n    //   const input = document.querySelector(`#${setting.id}`)?.value;\n    //   inputSettings[setting.id] = input;\n\n    // });\n    // setSettings(inputSettings);\n    flipSide();\n    \n  }\n\n  // Reset the counter\n  const reset = () => {\n    resetTimer();\n  }\n\n\n  return (\n    <>\n      <Card side=\"front\">\n        <Display  />\n\n        <div className=\"btn_bar\">\n            {timerCounting &&\n                  <Button \n                      id = \"pause_btn\"\n                      value=\"pause\"\n                      classifiers=\"primary\"\n                      isIconButton={true} \n                      onClick={toggleCounting} \n                      iconName=\"pause\"\n                  />\n            }\n\n            {!timerCounting &&\n                  <Button \n                      id = \"start_btn\"\n                      value=\"start\"\n                      classifiers={className(playButtonStyle)}\n                      isIconButton={true} \n                      onClick={toggleCounting} \n                      iconName=\"play\"\n                  />\n            \n            }\n\n            {timerCounting && \n              <Button \n              id = \"complete\"\n              value=\"complete\"\n              classifiers = \"primary\"\n              isIconButton = {true}\n              onClick={completeTimer}\n              iconName=\"play-forward-outline\"\n            />\n            \n            }\n            {!timerCounting &&\n              <Button \n                id = \"reset_btn\"\n                value=\"reset\"\n                classifiers = \"primary\"\n                isIconButton = {true}\n                onClick={reset}\n                iconName=\"refresh-outline\"\n              />\n            }\n          \n            {settings && <Button \n              id = \"settings_btn\"\n              value=\"settings\"\n              classifiers = \"secondary\"\n              isIconButton = {true}\n              onClick={flipSide}\n              iconName=\"settings\"\n            />}\n        </div>\n      </Card>\n      <Card side=\"back\">\n            <h1>Settings</h1>\n            {settings && \n              <div className=\"settings-form\" id=\"inputs\">\n                  {settings.map((setting, index) => \n                      <Input key={index}\n                             label={setting.label} \n                              placeholder={setting.placeholder} \n                              value={context[setting.id]}\n                              id={setting.id}\n                      />)\n                  }\n              </div>\n              }\n            <div className=\"btn_bar\">\n              <Button \n                  id = \"back_btn\"\n                  value=\"back\"\n                  isIconButton = {true}\n                  onClick={flipSide}\n                  iconName=\"arrow-back-outline\"\n              />\n              <Button onClick={saveSettings}>\n                Save\n              </Button>\n            </div>\n      </Card>\n    </>\n  );\n\n\n  \n}\n\nTimer.propTypes = {\n  settings: PropTypes.array,\n  statusMessage: PropTypes.string,\n  displayTime: PropTypes.string,\n  onChange: PropTypes.func\n}\n\nexport default Timer;\n","import styled from \"styled-components\";\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\nimport Display from \"../components/generic/Display/Display\";\nimport Button from \"../components/generic/Button/Button\";\nimport Input from \"../components/generic/Input/Input\";\nimport Tabs from \"../components/generic/Tabs/Tabs\";\nimport Card from \"../components/generic/Card/Card\";\nimport Panel from \"../components/generic/Panel/Panel\";\nimport Timer from \"../components/generic/Timer\";\n\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\nconst TIMER_SETTINGS = [{id:\"startTime\", value: \"00:00:00\"}];\n\nconst Documentation = () => {\n\n\n  const flip = () => {\n    const card = document.querySelector(\"#testcard\");\n    if (card) card.classList.toggle('is-flipped');\n  }\n\n  return (\n    <>\n      <Title>Documentation</Title>\n\n\n      <DocumentComponent\n        title=\"Generic Timer\"\n        component={<Panel><Timer settings={TIMER_SETTINGS} /></Panel>}\n        propDocs={[\n          {\n            prop: \"settings\",\n            description: \"Collection that defines the allowed settings for a timer\",\n            type: \"array of objects - [{label: 'label1', value: 'value1', placeholder: 'placeholder1'}, {...}]\",\n            defaultValue: \"Optional. Default: []\",\n          },\n          {\n            prop: \"statusMessage\",\n            description: \"Status message that can be used for rounds/rest\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"startTime\",\n            description: \"Starting time for the timer\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: 00:00:00\",\n          },\n          {\n            prop: \"onChange\",\n            description: \"Event handler for capturing values input on change\",\n            type: \"function\",\n            defaultValue: \"Optional. Default: None\",\n          }\n\n        ]}\n      />   \n\n      <DocumentComponent\n        title=\"Circular Display \"\n        component={<Display isStarted={true} status=\"Status Text\" value=\"00:10:00\" />}\n        propDocs={[\n          {\n            prop: \"isStarted\",\n            description: \"Animates the circular display\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: false\",\n          },\n          {\n            prop: \"status\",\n            description: \"Status message that can be used for rounds/rest\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Value to be displayed\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: 00:00:00\",\n          }\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Button \"\n        component={<Button onClick={() => console.log(\"test\")}>Text Button</Button>}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the button\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Identifier for the action useful to identify the event\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"isIconButton\",\n            description: \"Creates an icon button\",\n            type: \"boolean\",\n            defaultValue: \"Optional. Default: false\"\n          },\n          {\n            prop: \"iconName\",\n            description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"iconVisible\",\n            description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: true\"\n          },\n          {\n            prop: \"classifiers\",\n            description: \"CSS classes to append additional styles\",\n            type:  \"string\",\n            defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n          },\n          {\n            prop: \"onClick\",\n            description: \"Event handler for clicking on a button\",\n            type:  \"function\",\n            defaultValue:  \"Required. Default: None\"\n          },\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Button (with Icon configuration)\"\n        component={<Button \n          id = \"settings_btn\"\n          value=\"settings\"\n          classifiers = \"secondary\"\n          isIconButton = {true}\n          onClick={()=>console.log(\"icon button\")}\n          iconName=\"settings\"\n        />}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the button\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Identifier for the action useful to identify the event\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"isIconButton\",\n            description: \"Creates an icon button\",\n            type: \"boolean\",\n            defaultValue: \"Optional. Default: false\"\n          },\n          {\n            prop: \"iconName\",\n            description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"iconVisible\",\n            description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: true\"\n          },\n          {\n            prop: \"classifiers\",\n            description: \"CSS classes to append additional styles\",\n            type:  \"string\",\n            defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n          },\n          {\n            prop: \"onClick\",\n            description: \"Event handler for clicking on a button\",\n            type:  \"function\",\n            defaultValue:  \"Required. Default: None\"\n          },\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Input \"\n        component={<Input label=\"Test Label\" />}\n        propDocs={[\n          {\n            prop: \"label\",\n            description: \"Label of the input field\",\n            type: \"String\",\n            defaultValue: \"Required. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Initial value passed to the input\",\n            type: \"String\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"placeholder\",\n            description: \"Input placeholder text\",\n            type: \"String\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"onChange\",\n            description: \"Event handler for capturing keyboard inputs\",\n            type:  \"function\",\n            defaultValue:  \"Optional. Default: None\"\n          }\n\n\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Tabs \"\n        component={<Tabs tabItems={[\"Tab 1\", \"Tab 2\", \"Tab 3\", \"Tab 4\"]} />}\n        propDocs={[\n          {\n            prop: \"tabItems\",\n            description: \"Array of tab labels. Max 4 tabs. If more, the control will not render\",\n            type: \"Array of strings\",\n            defaultValue: \"Optional. Default: []\",\n          },\n          {\n            prop: \"onChange\",\n            description: \"Event handler for capturing the selected tab\",\n            type: \"function\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Card \"\n        component={\n          <Panel id=\"testcard\">\n            <Card side=\"front\">\n              front side\n              <Button onClick={flip}>Flip</Button>\n            </Card>\n            <Card side=\"back\">\n              back side\n              <Button onClick={flip}>Flip Again</Button>\n            </Card>\n          </Panel>}\n        propDocs={[\n          {\n            prop: \"side\",\n            description: `Card container that flips using css. \n            Two Cards (front and back) need to be defined in order for flipping to work`,\n            type: \"string\",\n            defaultValue: \"Optional. Default: 'front'. Possible values: 'front' |  'back'\",\n          },\n          {\n            prop: \"Children Nodes\",\n            description: `Accepts any React and HTML valid nodes. \n            An event within a child element of the card could trigger the flipping.\n            The event handler should query the id of Panel container and apply toggle('is-flipped') to\n            the queried element`,\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      /> \n\n      <DocumentComponent\n        title=\"Panel \"\n        component={<Panel >Content goes here</Panel>}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the panel that will allow flipping the cards\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"Children Nodes\",\n            description: \"Accepts any React and HTML valid nodes\",\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Container \"\n        component=\"Generic Empty Container\"\n        propDocs={[\n          {\n            prop: \"Children Nodes\",\n            description: \"Accepts any React and HTML valid nodes\",\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />           \n\n\n    </>\n  );\n\n}\n\nexport default Documentation;\n","import { useContext } from 'react';\nimport {  TimerContext } from '../platform/TimerProvider'; \nimport { useTimerStarter, useTimerInitializer  } from './timerhooks';\nimport { TIMER_SETTINGS } from '../utils/helpers';\n\nexport const useTimer = () => {\n\n    const { ...context } = useContext(TimerContext);\n    const { selectedTimer } = context;\n\n    useTimerInitializer(TIMER_SETTINGS.settings[selectedTimer], context);\n    useTimerStarter(context);\n  \n}","import { useEffect, useRef } from 'react';\nimport { WORK_MODE, T_TABATA } from '../utils/helpers';\n\n// Hook used to start the timers\nexport const useTimerStarter = (context) => {\n  \n  const {timerCounting, startTimer, isTimerOver, pauseTimer, completeTimer, selectedTimer} = context;\n  const runningTimer = useRef();\n\n  useEffect(() => {\n    if (timerCounting && !isTimerOver()) runningTimer.current = startTimer()\n    else if (isTimerOver()) completeTimer();\n    else if (!isTimerOver()) pauseTimer(runningTimer.current);\n    return () => pauseTimer(runningTimer.current);\n  }, [timerCounting, startTimer, isTimerOver, pauseTimer, completeTimer, selectedTimer]);\n\n  return  runningTimer.current;\n\n};\n\n// Hook use to initialize timers\nexport const useTimerInitializer = (inputSettings, context) => {\n\n  const {setSettings, setCounter, setCurrentRound, mode, selectedTimer, setToComplete, setTimerCounting } = context; \n  const { startTime, stopTime, totalRounds, restStartTime } = inputSettings;\n\n\n  useEffect(() => {\n    setSettings({ startTime, stopTime, totalRounds: totalRounds?? 1, restStartTime: restStartTime?? 0 });\n    setCounter(mode === WORK_MODE? startTime : restStartTime);\n\n    //Only reset if it is not TABATA\n    if (selectedTimer !== T_TABATA)  {\n      setCurrentRound(1);\n      setToComplete(false);\n      setTimerCounting(false);\n    } \n  }, [setSettings, setCounter, startTime, stopTime, totalRounds, restStartTime, \n      setCurrentRound, mode, selectedTimer, setToComplete, setTimerCounting]);\n\n}\n\n","import Timer from \"../generic/Timer\";\nimport { useTimer } from \"../../hooks/useTimer\";\n\nconst StopWatch = ()  =>  {\n\n  useTimer();\n  return <Timer />\n\n}\n\nexport default StopWatch;\n","import Timer from '../../components/generic/Timer';\nimport { useTimer } from \"../../hooks/useTimer\";\n\nconst Countdown = () => {\n\n  useTimer();\n  return <Timer />\n  \n}\n\nexport default Countdown;\n","import Timer from \"../generic/Timer\";\nimport { useTimer } from '../../hooks/useTimer'\n\nconst XY = () => {\n\n  useTimer();\n  return <Timer />\n\n}\n\nexport default XY;","import Timer from \"../generic/Timer\";\nimport { useTimer } from '../../hooks/useTimer';\n\nconst Tabata = ()  => {\n  \n  useTimer();\n  return <Timer  />\n  \n}\n\nexport default Tabata;","import { useContext } from 'react';\nimport {  SettingsContext } from '../platform/SettingsProvider';\nimport Tabs  from \"../components/generic/Tabs/Tabs\";\nimport Panel from \"../components/generic/Panel/Panel\";\n\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\nimport * as utils from '../utils/helpers.js';\nimport { T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA } from '../utils/helpers';\n\nconst TimersView = () => {\n\n  const { selectedTimer, setSelectedTimer } = useContext(SettingsContext);\n\n  const timers = [\n    { title: T_STOPWATCH, C: <Stopwatch /> },\n    { title: T_COUNTDOWN, C: <Countdown /> },\n    { title: T_XY, C: <XY /> },\n    { title: T_TABATA, C: <Tabata /> },\n  ];\n\n\n  const handleChange =  (v) => {\n    setSelectedTimer(v);\n  }\n\n  return (\n    <>\n      <Tabs tabItems={utils.readCollection(timers, 'title')} \n            onChange={handleChange} />\n      <Panel id=\"timer_panel\">\n        {utils.getTimer(selectedTimer, timers)}\n      </Panel>\n    </>\n\n  );\n  \n\n}\n\n\nexport default TimersView;\n","import React from \"react\";\nimport TimerProvider from './platform/TimerProvider';\nimport SettingsProvider from \"./platform/SettingsProvider\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Container from \"./components/generic/Container/Container\";\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\n\n\nconst App = () => {\n  return (\n      <Router>\n        <nav className=\"navigation\">\n            <ul>\n              <li key={1}>\n                <Link to=\"/\">Timers</Link>\n              </li>\n              <li key={2}>\n                <Link to=\"/docs\">Documentation</Link>\n              </li>\n            </ul>\n          </nav>\n          <br />\n          <SettingsProvider>\n            <TimerProvider>\n              <Container>\n                <Switch>\n                    <Route path=\"/docs\">\n                      <DocumentationView />\n                    </Route>\n                    <Route path=\"/\">\n                      <TimersView />\n                    </Route>\n                  </Switch>\n              </Container>\n            </TimerProvider>\n          </SettingsProvider>\n      </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}