{"version":3,"sources":["utils/helpers.js","platform/SettingsProvider.js","platform/TimerProvider.js","components/generic/Container/Container.js","components/documentation/DocumentComponent.js","components/generic/Display/Display.js","components/generic/Button/Button.js","components/generic/Input/Input.js","components/generic/Tabs/Tabs.js","components/generic/Card/Card.js","components/generic/Panel/Panel.js","views/DocumentationView.js","components/generic/Timer.js","hooks/useTimer.js","hooks/timerhooks.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","views/TimersView.js","App.js","index.js"],"names":["getTimer","timerName","arr","find","timer","title","C","formatTime","seconds","slice","fetchedMinutes","Math","floor","minutes","hours","T_STOPWATCH","T_COUNTDOWN","T_TABATA","T_XY","WORK_MODE","REST_MODE","TIMER_SETTINGS","timers","SettingsContext","React","createContext","SettingsProvider","children","useState","selectedTimer","setSelectedTimer","startTime","setStartTime","stopTime","setStopTime","totalRounds","setTotalRounds","restStartTime","setRestStartTime","setSettings","useCallback","settings","key","value","newStartTime","isPersistent","localStorage","setItem","JSON","stringify","isValid","parseInt","mode","isNaN","configurations","max","min","persistence","Provider","getSettings","TimerContext","TimerProvider","useContext","settingsContext","statusMessage","setStatusMessage","timerCounting","setTimerCounting","counter","setCounter","currentRound","setCurrentRound","setMode","isFrontSide","setIsFrontSide","isComplete","setToComplete","restRound","setRestRound","startCounting","resetTimer","resetMode","exitTimer","toggleCounting","toggleSide","isTimerOver","startTimer","setInterval","setTimeout","pauseTimer","interval","clearInterval","initializeTimer","completeTimer","messenger","duration","abs","refTime","elapsed","includes","Container","className","Section","styled","div","Article","Title","RenderComponent","Documentation","table","DocumentComponent","component","propDocs","map","doc","index","prop","description","type","defaultValue","Display","successStyle","toLowerCase","useEffect","utils","Button","props","id","isIconButton","iconName","classifiers","iconVisible","buttonAttributes","buttonStyle","iconVisibility","class","name","Input","label","placeholder","inputAttributes","setValue","onChange","e","target","Tabs","tabItems","tabSelected","tabStyle","handleChange","length","tabItem","checked","htmlFor","Card","side","cardStyle","Panel","flip","card","document","querySelector","classList","toggle","onClick","console","log","CONFIG","Timer","context","schema","playButtonStyle","flipSide","setting","inputSettings","forEach","input","useTimer","parse","getItem","loadFromStorage","useTimerInitializer","runningTimer","useRef","current","useTimerStarter","StopWatch","Countdown","XY","Tabata","TimersView","keyName","Stopwatch","item","v","App","to","path","DocumentationView","ReactDOM","render","StrictMode","getElementById"],"mappings":"ysDAeaA,EAAW,SAACC,EAAWC,GAIhC,OAAOA,EAAIC,MAHX,SAAiBC,GACb,OAAOA,EAAMC,QAAUJ,KAEAK,GAiBlBC,EAAa,SAACH,GACvB,IAAMI,EAAU,WAAKJ,EAAQ,IAAMK,OAAO,GACpCC,EAAc,UAAMC,KAAKC,MAAMR,EAAQ,KACvCS,EAAU,WAAIH,EAAiB,IAAKD,OAAO,GAC3CK,EAAQ,WAAIH,KAAKC,MAAMR,EAAQ,OAAQK,OAAO,GAEpD,MAAM,GAAN,OAAUK,EAAV,YAAmBD,EAAnB,YAA8BL,IAoBrBO,EAAc,YACdC,EAAc,YACdC,EAAW,SACXC,EAAO,KACPC,EAAY,OACZC,EAAY,OAGZC,EAAiBC,E,OCnEjBC,EAAkBC,IAAMC,cAAc,IA+DpCC,EA5DiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAE/B,EAA2CC,mBAASb,GAApD,mBAAOc,EAAP,KAAsBC,EAAtB,KACA,EAAkCF,mBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,mBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAsCN,mBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA0CR,mBAAS,GAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KAYMC,EAAcC,uBAAY,SAACC,GAG7B,ID6BuBC,EAAKC,EC7BxBC,EAAeH,EAASV,WACvBF,IAAkBd,GAAe0B,EAASV,UAAYU,EAASR,UAC5DJ,IAAkBb,GAAeyB,EAASV,UAAYU,EAASR,YACnEW,EAAeH,EAASV,UACxBU,EAASV,UAAYU,EAASR,SAC9BQ,EAASR,SAAWW,GAIpBC,MDoBmBH,ECpBWb,EDoBNc,ECpBqBF,EDqBrDK,aAAaC,QAAQL,EAAKM,KAAKC,UAAUN,KClBrCX,EAAaS,EAASV,WAAamB,EAAQT,EAASV,WAAYoB,SAASV,EAASV,WAAY,GAC9FG,EAAYO,EAASR,UAAYiB,EAAQT,EAASR,UAAWkB,SAASV,EAASR,UAAW,GAC1FG,EAAeK,EAASN,aAAee,EAAQT,EAASN,YAAa,UAAWgB,SAASV,EAASN,aAAe,GACjHG,EAAiBG,EAASJ,eAAiBa,EAAQT,EAASJ,eAAiBc,SAASV,EAASJ,eAAgB,KAChH,CAACR,IAIEqB,EAAW,SAACP,GAAD,IAAQS,EAAR,uDAAe,OAAf,OAA2BT,IAAUU,MAAMV,IAAUA,GAAStB,EAAeiC,eAAeF,GAAMG,KAAOZ,GAAStB,EAAeiC,eAAeF,GAAMI,KAIjKX,EAAe,kBAAMxB,EAAeiC,eAAeG,aAEzD,OAAO,cAAClC,EAAgBmC,SAAjB,CACCf,MAAO,CACHd,gBAAeC,mBACfC,YAAWC,eACXC,WAAUC,cACVC,cAAaC,iBACbC,gBAAeC,mBACfqB,YA5CQ,WAChB,OAAkB,IAAd5B,GAAgC,IAAbE,GAAmC,IAAhBE,GAAuC,IAAlBE,EACnD,KAED,CAACN,YAAWE,WAAUE,cAAaE,kBAwCzBE,cAAaM,gBAP/B,SASElB,KC1DAiC,EAAepC,IAAMC,cAAc,IAqMjCoC,EAnMc,SAAC,GAAkB,IAAhBlC,EAAe,EAAfA,SAG5B,EAA+BmC,qBAAWvC,GAA/BwC,EAAX,oBAEIlC,EAI6BkC,EAJ7BlC,cACAE,EAG6BgC,EAH7BhC,UACAE,EAE6B8B,EAF7B9B,SACAI,EAC6B0B,EAD7B1B,cACAF,EAA6B4B,EAA7B5B,YAAaI,EAAgBwB,EAAhBxB,YAEjB,EAA0CX,mBAAS,IAAnD,mBAAOoC,EAAP,KAAsBC,EAAtB,KACA,EAA2CrC,oBAAS,GAApD,mBAAOsC,EAAP,KAAsBC,EAAtB,KACA,EAA8BvC,mBAASG,GAAvC,mBAAOqC,EAAP,KAAgBC,EAAhB,KACA,EAAwCzC,mBAAS,GAAjD,mBAAO0C,EAAP,KAAqBC,EAArB,KACA,EAAwB3C,mBAAST,GAAjC,mBAAOiC,EAAP,KAAaoB,EAAb,KACA,EAAsC5C,oBAAS,GAA/C,mBAAO6C,EAAP,KAAoBC,EAApB,KACA,EAAoC9C,oBAAS,GAA7C,mBAAO+C,EAAP,KAAmBC,EAAnB,KAEA,EAAkChD,mBAAS,GAA3C,mBAAOiD,EAAP,KAAkBC,GAAlB,KAqBUC,GAAiB,WACnB,OAAOlD,GACH,KAAKd,EACDsD,GAAW,SAACD,GAAD,OAAaA,EAAU,KAClC,MACJ,KAAKnD,EACDoD,GAAW,SAACD,GAAD,OAAaA,EAAU,KAClB,IAAZA,GAAiBhB,IAAShC,GAC1BoD,EAAQrD,GACRkD,EAAWtC,GACXwC,EAAgBD,EAAe,IACZ,IAAZF,GAAiBhB,IAASjC,IACjCqD,EAAQpD,GACRiD,EAAWhC,GACXyC,GAAaD,EAAY,IAE7B,MACJ,QAEIR,GAAW,SAACD,GAAD,OAAaA,EAAU,KAClB,IAAZA,IACAY,IAAW,GACXT,GAAgB,SAACD,GAAD,OAAkBA,EAAe,QAa/DU,GAAa,WAAuB,IAAtBC,IAAqB,yDAErCZ,EAAWjB,IAASjC,EAAWY,EAAYM,GAErC4C,IACFT,EAAQrD,GACRyD,GAAc,GACdT,GAAiB,GACjBI,EAAgB,GAChBO,GAAa,KAoBfI,GAAY1C,uBAAY,WAC1B2B,GAAiB,GACjBS,GAAc,GACdL,EAAgB,KACjB,IAeGY,GAAkB,WACpBhB,GAAkBD,IAqDtB,OAAO,cAACN,EAAaF,SAAd,CACCf,MAAK,aACD2B,eAAcC,kBACdnB,OAAMoB,UACNR,gBAAeC,mBACfC,gBAAeiB,kBAAgBhB,mBAC/BC,UAASC,aACTI,cAAaW,WAxDN,WACVX,GAAaO,KAClBN,GAAgBD,IAuDRE,aAAYC,gBACZS,YAnDQ,WAGhB,OAAItD,GAAaE,EACLiC,GAAiBE,GAAWnC,GAAYqC,IAAiBnC,IAC7DN,IAAkBZ,GAAU4D,IAAc1C,GAItC+B,GAAiBE,GAAWnC,GAAYqC,IAAiBnC,GA0ChDmD,WAnKN,WAIf,OAHAV,GAAc,GAGV7D,EACOwE,aAAY,WACfR,OACD,KAIIS,YAAW,WACdT,OACDhD,IAsJ0B0D,WArHlB,SAACC,GAChBC,cAAcD,IAoH+BV,cAAYY,gBAhGrC,SAACnD,GACrBF,EAAYE,GACZ4B,EAAWjB,IAASjC,EAAWY,EAAYM,GACvCR,IAAkBZ,IAClBoD,EAAWjB,IAASjC,EAAWY,EAAYM,GAC3CmC,EAAQrD,GACRyD,GAAc,GACdT,GAAiB,GACjBI,EAAgB,GAChBO,GAAa,KAwFTI,aAAWW,cA5ED,SAACH,GAQnB,OAPAC,cAAcD,GACdP,KACAd,EAAWpC,GACXsC,EAAgBpC,GAChB2C,GAAa3C,GACbqC,EAAQrD,GACRyD,GAAc,IACP,GAoE2BkB,UAvCpB,WAGd,IAAMC,EAAW3C,IAASjC,EAAWR,KAAKqF,IAAIjE,EAAYE,GAAYtB,KAAKqF,IAAI3D,EAAgBJ,GACzFgE,EAAU7C,IAASjC,EAAWY,EAAYM,EAC1C6D,EAAuB,IAAbH,EAAgBpF,KAAKqF,IAAI5B,EAAQ6B,GAASF,EAAW,EAGrE,OAAI3C,IAAShC,GAAcgD,IAAYrC,EAAY,GAAKqC,IAAYrC,EAAY,EAC5EqB,IAASjC,GAAciD,IAAYrC,EAAY,GAAKqC,IAAYrC,EAAY,EAC5E4C,EAAoB,sBAGnBT,GAAiBE,IAAYrC,GAAaqC,IAAYnC,EACvDmB,IAAShC,GAAayD,IAAc1C,GAAe4D,GAAW,GAAKG,GAAW,GAAa,eAC3F9C,IAAShC,GAAa2E,GAAW,GAAKG,GAAW,GAAa,6BAC9D9C,IAAShC,GAAa2E,GAAW,GAAKG,GAAW,GAAc,qBAI/DH,GAAY,IAAMG,GAAW,GAAa,uBAC1CH,GAAY,IAAMG,GAAW,GAAa,cAG1CrE,IAAkBX,EAAY,SAAN,OAAgBoD,EAAhB,eAAmCnC,GAC3D,CAACpB,EAAaC,GAAamF,SAAStE,GAAsB,eAAN,OAAsBtB,EAAW0B,IACrFJ,IAAkBZ,EAAgB,GAAN,OAAUmC,EAAV,qBAA2BkB,EAA3B,eAA8CnC,QAA9E,EAb6E,yBAJc,wBADA,eAgChF4B,GAXR,SAcEpC,K,eCxLEyE,G,MAVG,SAAC,GAAgB,IACzBzE,EADwB,oBACxBA,SACR,OAAO,qBAAK0E,UAAU,YAAf,SAA4B1E,M,gBCF/B2E,EAAUC,IAAOC,IAAV,oOAaPC,EAAUF,IAAOC,IAAV,6XAgBPE,EAAQH,IAAOC,IAAV,8FAMLG,EAAkBJ,IAAOC,IAAV,+CAIfI,EAAgBL,IAAOM,MAAV,0BAmCJC,EAjCW,SAAC,GAAkC,IAAjCzG,EAAgC,EAAhCA,MAAO0G,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SAC5C,OACE,eAACV,EAAD,WACM,cAACI,EAAD,UAAQrG,IACR,cAACsG,EAAD,UAAkBI,IAClB,cAACN,EAAD,UACE,cAAC,EAAD,UACE,kCACA,+BACE,sCACA,6CACA,sCACA,iDAJO,GAMRO,EAASC,KAAI,SAACC,EAAKC,GAClB,OACE,+BACE,6BAAKD,EAAIE,OACT,6BAAKF,EAAIG,cACT,6BAAKH,EAAII,OACT,6BACE,+BAAOJ,EAAIK,mBALNJ,iB,+BCLZK,EAhDC,WAAO,IAAD,EAClB,EACoE1D,qBAAWF,GADvEQ,EAAR,EAAQA,QAASF,EAAjB,EAAiBA,cAAgBF,EAAjC,EAAiCA,cAAeC,EAAhD,EAAgDA,iBAC5C6B,EADJ,EACIA,UAAWnB,EADf,EACeA,WAAYN,EAD3B,EAC2BA,WAAYtC,EADvC,EACuCA,UAAWF,EADlD,EACkDA,cAE5C4F,EAAe,+BACb5F,EAAc6F,gBAAmB/C,GADpB,cAEjB,UAAWA,GAFM,IAarB,OARAgD,qBAAU,WACNtD,EAAWtC,KACZ,CAACsC,EAAYtC,IAEhB4F,qBAAU,WACN1D,EAAiB6B,OAClB,CAAC7B,EAAkB6B,IAKlB,cADA,CACA,OAAKO,UAAU,mBAAf,UACI,sBAAKA,UAAU,SAAf,UACMrC,GAAiB,mBAAGqC,UAAWA,IAAU,SAAUoB,GAAlC,SAAmDzD,KACpEW,GAAc,mBAAG0B,UAAWA,IAAU,iBAAkBoB,GAA1C,SAA2DG,EAAiBxD,KAC3FO,GAAc,mBAAG0B,UAAWA,IAAU,iBAAkBoB,GAA1C,wBAKbvD,GACE,qCACI,qBAAKmC,UAAU,4BACf,qBAAKA,UAAU,mC,kGCexBwB,EAhDC,SAAC,GAAgB,IAAD,EAAXC,EAAW,oBACpBjG,EAAkBiC,qBAAWF,GAA7B/B,cAEJkG,EAOuBD,EAPvBC,GADJ,EAQ2BD,EANvBnF,aAFJ,MAEY,GAFZ,IAQ2BmF,EALvBE,oBAHJ,WAQ2BF,EAJvBG,gBAJJ,MAIe,GAJf,IAQ2BH,EAHvBI,mBALJ,MAKkB,cALlB,IAQ2BJ,EAFvBK,mBANJ,SAOIxG,EACuBmG,EADvBnG,SACGyG,EARP,YAQ2BN,EAR3B,GAWMO,EAAc,KAChB,SAAYL,GADI,iCAEHnG,EAAc6F,gBAAkB,GAF7B,cAGhB,OAAQM,GAHQ,oCAIAnG,EAAc6F,gBAAkB,GAJhC,IAOdY,EAAiB,CAAC,CACpB,KAAQH,EACR,MAASA,IAGb,OAGI,cADA,CACA,+BAAKJ,GAAIA,EAAIpF,MAAOA,EAAO0D,UAAWA,IAAUgC,EAAaH,IAAmBE,GAAhF,cACMJ,GACE,0BAAUrF,MAAOA,EAAO4F,MAAOlC,IAAUiC,GAAiBE,KAAMP,KAElED,GAAgBrG,O,kCCEf8G,EApCD,SAAC,GAAgB,IAAZX,EAAW,oBAElBY,EAA2CZ,EAA3CY,MAAOC,EAAoCb,EAApCa,YAAgBC,EAA/B,YAAmDd,EAAnD,GACA,EAA0BlG,mBAASkG,EAAMnF,OAAzC,mBAAOA,EAAP,KAAckG,EAAd,KAIAlB,qBAAU,WACNkB,EAASf,EAAMnF,SAChB,CAACkG,EAAUf,EAAMnF,QAQpB,OACI,mCACC+F,GACG,qCACI,uBAAOrC,UAAU,iBAAjB,SAAoCqC,IACpC,iDAAYE,GAAZ,IAA6BjG,MAAOA,EAAOgG,YAAaA,EAAaG,SAV5D,SAACC,GAClBF,EAASE,EAAEC,OAAOrG,OACdmF,EAAMgB,UAAUhB,EAAMgB,SAASC,aCoC5BE,G,MA/CF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEZ,EAA6DpF,qBAAWF,GAAjE/B,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,iBAAkBqC,EAAxC,EAAwCA,iBAGlCgF,EAAeD,EAAS/C,SAAStE,GAAgBA,EAAgBqH,EAAS,GAG1EE,EAAW,CAAC,yBACVvH,EAAc6F,gBAAkB,IAGlC2B,EAAgB,SAACN,GACnB,IAAMpG,EAAQoG,EAAEC,OAAOrG,OAASwG,EAChCrH,EAAiBa,GACjBwB,GAAiB,IAGrB,OACI,qBAAKkC,UAAU,UAAf,SACI,sBAAKA,UAAU,cAAf,UACM6C,EAASI,QAAU,GAAKJ,EAASjC,KAAI,SAACsC,EAASpC,GAAV,OACnC,eAAC,WAAD,WACI,uBAAQG,KAAK,QACLkB,KAAM,SAAWrB,EAAQ,GACzBxE,MAAO4G,EACPxB,GAAI,QAAUZ,EAAQ,GACtBqC,QAASL,IAAgBI,EACzBT,SAAUO,IAElB,uBAAOI,QAAS,QAAUtC,EAAQ,GAC1Bd,UAAWA,IAAU+C,EAAU,gBAAkBjC,EAAM,IAD/D,SAEI,4BAAIoC,QAVGpC,MAcnB,qBAAKd,UAAU,6BCpBhBqD,G,MAnBD,SAAC,GAAgB,IAAZ5B,EAAW,oBAC1B,EAAoCA,EAA5B6B,YAAR,MAAc,QAAd,EAAuBhI,EAAamG,EAAbnG,SAEjBiI,EAAY,CAAC,oCACAD,KAASA,IAG5B,OACI,qBAAKtD,UAAWA,IAAUuD,GAA1B,SACMjI,MCQCkI,G,MAlBA,SAAC,GAAgB,IAAZ/B,EAAW,oBAC7B,EAA+BA,EAAvBC,UAAR,MAAa,GAAb,EAAiBpG,EAAcmG,EAAdnG,SAEjB,OACE,qBAAK0E,UAAU,QAAf,SACI,qBAAKA,UAAU,cAAc0B,GAAIA,EAAjC,SACKpG,QCEP+E,EAAQH,IAAOC,IAAV,gDAkRII,GA7QO,WAGpB,IAAMkD,EAAO,WACX,IAAMC,EAAOC,SAASC,cAAc,aAChCF,GAAMA,EAAKG,UAAUC,OAAO,eAGlC,OACE,qCACE,cAAC,EAAD,4BAEA,cAAC,EAAD,CACE9J,MAAM,oBACN0G,UAAW,cAAC,EAAD,IACXC,SAAU,CACR,CACEI,KAAM,gBACNC,YAAa,gCACbC,KAAM,OACNC,aAAc,oDAEhB,CACEH,KAAM,UACNC,YAAa,wBACbC,KAAM,SACNC,aAAc,sDAEhB,CACEH,KAAM,gBACNC,YAAa,kDACbC,KAAM,SACNC,aAAc,qDAKpB,cAAC,EAAD,CACElH,MAAM,UACN0G,UAAW,cAAC,EAAD,CAAQqD,QAAS,kBAAMC,QAAQC,IAAI,SAAnC,yBACXtD,SAAU,CACR,CACEI,KAAM,KACNC,YAAa,4BACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,QACNC,YAAa,yDACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,eACNC,YAAa,yBACbC,KAAM,UACNC,aAAc,4BAEhB,CACEH,KAAM,WACNC,YAAa,mFACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,cACNC,YAAa,+FACbC,KAAM,OACNC,aAAc,2BAEhB,CACEH,KAAM,cACNC,YAAa,0CACbC,KAAO,SACPC,aAAe,+GAEjB,CACEH,KAAM,UACNC,YAAa,yCACbC,KAAO,WACPC,aAAe,8BAKrB,cAAC,EAAD,CACElH,MAAM,mCACN0G,UAAW,cAAC,EAAD,CACTgB,GAAK,eACLpF,MAAM,WACNuF,YAAc,YACdF,cAAgB,EAChBoC,QAAS,kBAAIC,QAAQC,IAAI,gBACzBrC,SAAS,aAEXjB,SAAU,CACR,CACEI,KAAM,KACNC,YAAa,4BACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,QACNC,YAAa,yDACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,eACNC,YAAa,yBACbC,KAAM,UACNC,aAAc,4BAEhB,CACEH,KAAM,WACNC,YAAa,mFACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,cACNC,YAAa,+FACbC,KAAM,OACNC,aAAc,2BAEhB,CACEH,KAAM,cACNC,YAAa,0CACbC,KAAO,SACPC,aAAe,+GAEjB,CACEH,KAAM,UACNC,YAAa,yCACbC,KAAO,WACPC,aAAe,8BAKrB,cAAC,EAAD,CACElH,MAAM,SACN0G,UAAW,cAAC,EAAD,CAAO2B,MAAM,aAAa/F,MAAM,KAC3CqE,SAAU,CACR,CACEI,KAAM,QACNC,YAAa,2BACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,QACNC,YAAa,oCACbC,KAAM,yBACNC,aAAc,kDAEhB,CACEH,KAAM,cACNC,YAAa,yBACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,WACNC,YAAa,8CACbC,KAAO,WACPC,aAAe,2BAEjB,CACEH,KAAM,QACNC,YAAa,oDAOnB,cAAC,EAAD,CACEhH,MAAM,QACN0G,UAAW,cAAC,EAAD,CAAMmC,SAAU,CAACnI,EAAaC,EAAaE,EAAMD,KAC5D+F,SAAU,CACR,CACEI,KAAM,WACNC,YAAa,wEACbC,KAAM,mBACNC,aAAc,yBAEhB,CACEH,KAAM,gBACNC,YAAa,wCACbC,KAAM,SACNC,aAAc,qDAKpB,cAAC,EAAD,CACElH,MAAM,QACN0G,UACE,eAAC,EAAD,CAAOgB,GAAG,WAAV,UACE,eAAC,EAAD,CAAM4B,KAAK,QAAX,uBAEE,cAAC,EAAD,CAAQS,QAASN,EAAjB,qBAEF,eAAC,EAAD,CAAMH,KAAK,OAAX,sBAEE,cAAC,EAAD,CAAQS,QAASN,EAAjB,8BAGN9C,SAAU,CACR,CACEI,KAAM,OACNC,YAAY,iIAEZC,KAAM,SACNC,aAAc,kEAEhB,CACEH,KAAM,iBACNC,YAAY,yQAIZC,KAAM,OACNC,aAAc,8BAKpB,cAAC,EAAD,CACElH,MAAM,SACN0G,UAAW,cAAC,EAAD,gCACXC,SAAU,CACR,CACEI,KAAM,KACNC,YAAa,8DACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,iBACNC,YAAa,yCACbC,KAAM,OACNC,aAAc,8BAKpB,cAAC,EAAD,CACElH,MAAM,aACN0G,UAAU,0BACVC,SAAU,CACR,CACEI,KAAM,iBACNC,YAAa,yCACbC,KAAM,OACNC,aAAc,kCCxQpBgD,GAASlJ,EAAeiC,eAwIfkH,GAtID,WAEZ,MAAuB1G,qBAAWF,GAAvB6G,EAAX,oBACQzF,EAAiHyF,EAAjHzF,WAAYd,EAAqGuG,EAArGvG,cAAeiB,EAAsFsF,EAAtFtF,eAAgBC,EAAsEqF,EAAtErF,WAAYS,EAA0D4E,EAA1D5E,cAAehE,EAA2C4I,EAA3C5I,cAAe8C,EAA4B8F,EAA5B9F,WAAYpC,EAAgBkI,EAAhBlI,YACnGE,EAAWpB,EAAeqJ,OAAO7I,GAGjC8I,EAAkB,CAAC,CACvB,SAAW,EACX,SAAYhG,IAKRiG,EAAW,WACbxF,IACA,IAAM2E,EAAOC,SAASC,cAAc,gBAChCF,GAAMA,EAAKG,UAAUC,OAAO,eAgBpC,OACE,qCACE,eAAC,EAAD,CAAMR,KAAK,QAAX,UACE,cAAC,EAAD,IAEA,sBAAKtD,UAAU,UAAf,UACKnC,GACK,cAAC,EAAD,CACI6D,GAAK,YACLpF,MAAM,QACNuF,YAAY,UACZF,cAAc,EACdoC,QAASjF,EACT8C,SAAS,WAIjB/D,GACI,cAAC,EAAD,CACI6D,GAAK,YACLpF,MAAM,QACNuF,YAAa7B,IAAUsE,GACvB3C,cAAc,EACdoC,QAASjF,EACT8C,SAAS,SAKlB/D,GACC,cAAC,EAAD,CACA6D,GAAK,WACLpF,MAAM,WACNuF,YAAc,UACdF,cAAgB,EAChBoC,QAASvE,EACToC,SAAS,0BAIT/D,GACA,cAAC,EAAD,CACE6D,GAAK,YACLpF,MAAM,QACNuF,YAAc,UACdF,cAAgB,EAChBoC,QAASpF,EACTiD,SAAS,oBAIZxF,GAAY,cAAC,EAAD,CACXsF,GAAK,eACLpF,MAAM,WACNuF,YAAc,YACdF,cAAgB,EAChBoC,QAASQ,EACT3C,SAAS,mBAIjB,eAAC,EAAD,CAAM0B,KAAK,OAAX,UACM,0CACClH,GACC,qBAAK4D,UAAU,gBAAgB0B,GAAG,SAAlC,SACKtF,EAASwE,KAAI,SAAC4D,EAAS1D,GAAV,eACV,cAAC,EAAD,CACQuB,MAAOmC,EAAQnC,MACfpB,KAAK,SACLqB,YAAW,4BAAa4B,GAAOM,EAAQvD,aAA5B,aAAa,EAAsB9D,IAAnC,0BAA8C+G,GAAOM,EAAQvD,aAA7D,aAA8C,EAAsB/D,KAC/EZ,MAAO8H,EAAQI,EAAQ9C,IACvBA,GAAI8C,EAAQ9C,IALPZ,QAWvB,sBAAKd,UAAU,UAAf,UACE,cAAC,EAAD,CACI0B,GAAK,WACLpF,MAAM,OACNqF,cAAgB,EAChBoC,QAASQ,EACT3C,SAAS,uBAEb,cAAC,EAAD,CAAQmC,QAjGE,WACpB,IAAMU,EAAgB,GACtBrI,EAASsI,SAAQ,SAACF,GAAa,IAAD,EACtBG,EAAK,UAAGhB,SAASC,cAAT,WAA2BY,EAAQ9C,YAAtC,aAAG,EAA0CpF,MACxDmI,EAAcD,EAAQ9C,IAAM5E,SAAS6H,IAAU,KAIjDzI,EAAYuI,GACZF,KAwFU,4BC7HDK,GAAW,WAEpB,MAAuBnH,qBAAWF,GAAvB6G,EAAX,oBACQ5I,EAAkB4I,EAAlB5I,cAGR,EAAwBD,mBboCG,SAACc,GAC5B,IACI,OAAOM,KAAKkI,MAAMpI,aAAaqI,QAAQzI,IACzC,MAAMqG,GACJ,OAAO,GaxCsBqC,CAAgBvJ,IAAkBR,EAAeoB,SAASZ,KCS5D,SAACiJ,EAAeL,GAEjD,IAAOlI,EAA2BkI,EAA3BlI,YAAa2C,EAAcuF,EAAdvF,UAEpByC,qBAAU,WAKR,OAHApF,EAAYuI,GAGL,kBAAM5F,OAGZ,CAAC3C,EAAa2C,EAAW4F,IDnB1BO,CAFA,oBAEmCZ,GCVR,SAACA,GAE9B,IAAOvG,EAAqEuG,EAArEvG,cAAeoB,EAAsDmF,EAAtDnF,WAAYD,EAA0CoF,EAA1CpF,YAAaI,EAA6BgF,EAA7BhF,WAAYI,EAAiB4E,EAAjB5E,cACrDyF,EAAeC,mBAErB5D,qBAAU,WAIR,OAHIzD,IAAkBmB,IAAeiG,EAAaE,QAAUlG,IACnDD,IAAeQ,IACnBJ,EAAW6F,EAAaE,SACtB,kBAAM/F,EAAW6F,EAAaE,YACpC,CAACtH,EAAeoB,EAAYD,EAAaI,EAAYI,IAEhDyF,EAAaE,QDAnBC,CAAgBhB,IEGLiB,GAfG,WAWhB,OAHAT,KAGO,cAAC,GAAD,KCIMU,GAfG,WAWhB,OAHAV,KAGO,cAAC,GAAD,KCIMW,GAfJ,WAWT,OAHAX,KAGO,cAAC,GAAD,KCIMY,GAfA,WAWb,OAHAZ,KAGO,cAAC,GAAD,KC4BMa,GA/BI,WAEjB,InBN6B5L,EAAK6L,EmBMlC,EAA4CjI,qBAAWF,GAA/C/B,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,iBAEjBR,EAAS,CACb,CAAEjB,MAAOU,EAAaT,EAAG,cAAC0L,GAAD,KACzB,CAAE3L,MAAOW,EAAaV,EAAG,cAAC,GAAD,KACzB,CAAED,MAAOa,EAAMZ,EAAG,cAAC,GAAD,KAClB,CAAED,MAAOY,EAAUX,EAAG,cAAC,GAAD,MAQxB,OACE,qCACE,cAAC,EAAD,CAAM4I,UnBtBmBhJ,EmBsBYoB,EnBtBPyK,EmBsBe,QnBrBxC7L,EAAI+G,KAAI,SAACgF,GACZ,OAAOA,EAAKF,OmBqBRjD,SAPY,SAACoD,GACrBpK,EAAiBoK,MAOf,cAAC,EAAD,CAAOnE,GAAG,cAAV,SACGH,EAAe/F,EAAeP,SCUxB6K,GAjCH,WAEV,OACI,cAAC,IAAD,UACE,cAAC,EAAD,UACI,eAAC,EAAD,WACA,qBAAK9F,UAAU,aAAf,SACI,+BACE,6BACE,cAAC,IAAD,CAAM+F,GAAG,IAAT,qBADO,GAGT,6BACE,cAAC,IAAD,CAAMA,GAAG,QAAT,4BADO,QAKb,uBACA,cAAC,EAAD,UACE,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,QAAZ,SACE,cAACC,GAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,IAAZ,SACE,cAAC,GAAD,mBC3BtBE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFzC,SAAS0C,eAAe,W","file":"static/js/main.891cca31.chunk.js","sourcesContent":["// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\nimport timers from '../utils/timers.json';\n\n\n// read from a collection of timers\nexport const readCollection = (arr, keyName) => {\n    return arr.map((item) => {\n        return item[keyName];\n    });\n}\n\n\n// Fetch timer info from collection of timers\nexport const getTimer = (timerName, arr) =>  {\n    function isTimer(timer) {\n        return timer.title === timerName;\n    }\n    return arr.find((isTimer)).C;\n}\n\n// match a property in a setting JSON\nconst isMatch = (setting, value) => {\n    return setting.id === value; \n}\n\n\n// Get a property from a setting JSON\nexport const getSetting = (value, settings) => {\n    const match = settings.find((setting) => isMatch(setting, value));\n    return match.value;\n}\n\n\n// Format time to string\nexport const formatTime = (timer) => {\n    const seconds = `0${(timer % 60)}`.slice(-2)\n    const fetchedMinutes = `${Math.floor(timer / 60)}`\n    const minutes = `0${fetchedMinutes % 60}`.slice(-2)\n    const hours = `0${Math.floor(timer / 3600)}`.slice(-2)\n  \n    return `${hours}:${minutes}:${seconds}`\n}\n\n\n// Load from storage\nexport const loadFromStorage = (key) => {\n    try {\n        return JSON.parse(localStorage.getItem(key));\n    } catch(e) {\n        return false;\n    }\n}\n\n// Save settings to storage\nexport const saveToStorage  = (key, value)  => {\n    localStorage.setItem(key, JSON.stringify(value));\n}\n\n\n// Timer types\nexport const T_STOPWATCH = \"Stopwatch\";\nexport const T_COUNTDOWN = \"Countdown\";\nexport const T_TABATA = \"Tabata\";\nexport const T_XY = \"XY\";\nexport const WORK_MODE = \"Work\";\nexport const REST_MODE = \"Rest\";\n\n// Timer settings from json\nexport const TIMER_SETTINGS = timers;","import React, { useState, useCallback } from 'react';\nimport { TIMER_SETTINGS, T_STOPWATCH, T_COUNTDOWN, saveToStorage } from '../utils/helpers';\n\nexport const SettingsContext = React.createContext({});\n\n\nexport const SettingsProvider = ({ children }) => {\n\n    const [selectedTimer, setSelectedTimer]  = useState(T_STOPWATCH);\n    const [startTime, setStartTime] = useState(0);\n    const [stopTime, setStopTime] = useState(0);\n    const [totalRounds, setTotalRounds] = useState(0);\n    const [restStartTime, setRestStartTime] = useState(0);\n\n\n    // Getter that wraps all the settings in one object\n    const getSettings = () => {\n        if (startTime === 0 && stopTime === 0  && totalRounds === 0 && restStartTime === 0)\n            return  null;\n        else\n            return {startTime, stopTime, totalRounds, restStartTime};\n    }\n\n    // Setter that sets all the settings in one call\n    const setSettings = useCallback((settings) =>  {\n\n        // Switch start and end if order not respected\n        let newStartTime = settings.startTime;\n        if ((selectedTimer === T_STOPWATCH && settings.startTime > settings.stopTime)\n            || (selectedTimer === T_COUNTDOWN && settings.startTime < settings.stopTime)) {\n            newStartTime = settings.startTime;\n            settings.startTime = settings.stopTime;\n            settings.stopTime = newStartTime;\n        } \n\n        // save if persistent is turned on\n        if (isPersistent()) saveToStorage(selectedTimer, settings);\n\n        // Set the settings\n        setStartTime(settings.startTime && isValid(settings.startTime)? parseInt(settings.startTime): 0);\n        setStopTime(settings.stopTime && isValid(settings.stopTime)? parseInt(settings.stopTime): 0);\n        setTotalRounds(settings.totalRounds && isValid(settings.totalRounds, \"rounds\")? parseInt(settings.totalRounds):  1);\n        setRestStartTime(settings.restStartTime && isValid(settings.restStartTime) ? parseInt(settings.restStartTime): 0);\n    }, [selectedTimer])\n\n\n    // Checks if input is valid based on expected configurations in timer.json\n    const isValid =  (value, mode = \"time\") =>  value && !isNaN(value) && value <= TIMER_SETTINGS.configurations[mode].max && value >= TIMER_SETTINGS.configurations[mode].min;\n\n    \n    // Checks if persistence is turned on in the configurations\n    const isPersistent = () => TIMER_SETTINGS.configurations.persistence;\n\n    return <SettingsContext.Provider \n            value={{ \n                selectedTimer, setSelectedTimer,\n                startTime, setStartTime,\n                stopTime, setStopTime,\n                totalRounds, setTotalRounds,\n                restStartTime, setRestStartTime,\n                getSettings, setSettings, isPersistent\n            }}>\n            {children}\n        </SettingsContext.Provider>;\n};\n\nexport default SettingsProvider;","import React, { useState, useContext, useCallback } from 'react';\nimport { T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA, WORK_MODE, REST_MODE, formatTime } from '../utils/helpers';\nimport { SettingsContext } from './SettingsProvider';\n\nexport const TimerContext = React.createContext({});\n\nexport const TimerProvider = ({ children }) => {\n\n    // Fetch content from Settings Provider\n    const { ...settingsContext } = useContext(SettingsContext);\n    const { \n        selectedTimer,\n        startTime,\n        stopTime,\n        restStartTime,\n        totalRounds, setSettings } = settingsContext;\n\n    const [statusMessage, setStatusMessage] = useState(\"\");\n    const [timerCounting, setTimerCounting] =  useState(false);\n    const [counter, setCounter] = useState(startTime);\n    const [currentRound, setCurrentRound] = useState(1);\n    const [mode, setMode] = useState(WORK_MODE);\n    const [isFrontSide, setIsFrontSide] = useState(true);\n    const [isComplete, setToComplete] = useState(false);\n\n    const [restRound, setRestRound] = useState(1);\n\n\n    // Start the timer\n    const startTimer = () => {\n        setToComplete(false);\n        \n        // counting up\n        if (T_STOPWATCH) \n            return setInterval(() => {\n                startCounting();\n            }, 1000);\n\n        // counting down can be done with timeout\n        else \n            return setTimeout(() => {\n                startCounting();\n            }, startTime)\n    }\n\n        // private function: start the counter\n        const startCounting =  () => {\n            switch(selectedTimer) {\n                case T_STOPWATCH:\n                    setCounter((counter) => counter + 1);\n                    break;\n                case T_TABATA:\n                    setCounter((counter) => counter - 1);\n                    if (counter === 0 && mode === REST_MODE) {\n                        setMode(WORK_MODE);\n                        setCounter(startTime);\n                        setCurrentRound(currentRound + 1);\n                    } else if (counter === 0 && mode === WORK_MODE) {\n                        setMode(REST_MODE);\n                        setCounter(restStartTime);\n                        setRestRound(restRound + 1);\n                    }\n                    break;\n                default:\n                    // /CountDown and XY have the same principles\n                    setCounter((counter) => counter - 1);\n                    if (counter === 0) {\n                        resetTimer(false);\n                        setCurrentRound((currentRound) => currentRound + 1);\n                    }\n    \n            }\n        }\n\n    // Pause the timer\n    const pauseTimer = (interval) => {\n        clearInterval(interval);\n    }\n\n    // Reset the timer: keeps the timer runner\n    // but reinitializes the counter\n    const resetTimer = (resetMode = true) => {\n        \n        setCounter(mode === WORK_MODE? startTime : restStartTime);\n\n        if (!!resetMode) {\n            setMode(WORK_MODE); \n            setToComplete(false);\n            setTimerCounting(false);\n            setCurrentRound(1);\n            setRestRound(0);\n        }\n    }\n\n\n    // Initializes the timer\n    const initializeTimer = (settings) => {\n        setSettings(settings);\n        setCounter(mode === WORK_MODE? startTime : restStartTime);\n        if (selectedTimer !== T_TABATA) {\n            setCounter(mode === WORK_MODE? startTime : restStartTime);\n            setMode(WORK_MODE); \n            setToComplete(false);\n            setTimerCounting(false);\n            setCurrentRound(1);\n            setRestRound(0);\n        }\n    }\n\n    // Resets all the timer controls upon  exit\n    const exitTimer = useCallback(() => {\n        setTimerCounting(false);\n        setToComplete(false);\n        setCurrentRound(1);\n    }, []);\n\n    // End the timer\n    const completeTimer = (interval) => {\n        clearInterval(interval);\n        toggleCounting();\n        setCounter(stopTime);\n        setCurrentRound(totalRounds);\n        setRestRound(totalRounds);\n        setMode(WORK_MODE);\n        setToComplete(true);\n        return true;\n    }\n\n    // Toggle timer on, off\n    const toggleCounting  = () => {\n        setTimerCounting(!timerCounting);\n    }\n\n    // Toggle between timer and settings card\n    const toggleSide = () => {\n        if (!isFrontSide) resetTimer();\n        setIsFrontSide(!isFrontSide);\n    }\n\n\n    // Check if the timer completed\n    const isTimerOver = () =>  {\n        \n        // countdown\n        if (startTime >= stopTime) \n            return  timerCounting && counter <= stopTime && currentRound === totalRounds  \n            && (selectedTimer === T_TABATA? restRound === totalRounds : true);\n        \n        // countup\n        else\n            return  timerCounting && counter >= stopTime && currentRound === totalRounds;\n    }\n\n    // Conversation handler\n    const messenger = () => {\n\n        // Use duration and elapsed time to control messaging\n        const duration = mode === WORK_MODE? Math.abs(startTime - stopTime) : Math.abs(restStartTime - stopTime) ;\n        const refTime = mode === WORK_MODE? startTime : restStartTime;\n        const elapsed = duration !== 0? Math.abs(counter-refTime)/duration : 1;\n\n        // Generic Beginning and Ending Messages\n        if (mode === REST_MODE && (counter === startTime + 1 || counter === startTime - 1)) return \"Breathe...\";\n        if (mode === WORK_MODE && (counter === startTime + 1 || counter === startTime - 1)) return \"Let's move that body!\";\n        if (isComplete)  return \"You made it! Again?\";  \n\n        // Breathing messages\n        if (!timerCounting && counter !== startTime && counter !== stopTime ) return \"Let's take a breath...\";\n        if (mode === REST_MODE && restRound === totalRounds && duration >=5 && elapsed >= 0.8) return  \"Almost done!\";\n        if (mode === REST_MODE && duration >=5 && elapsed >= 0.8) return  \"We're about to start again\";\n        if (mode === REST_MODE && duration >=5 && elapsed >= 0.6 ) return  \"Take a deep breath\";\n\n\n        // Goal reaching messages\n        if (duration >= 10 && elapsed >= 0.8 ) return \"Your goal is near...\";\n        if (duration >= 10 && elapsed >= 0.6 ) return \"Keep moving\";\n\n        // Main messages\n        if (selectedTimer === T_XY) return `Round ${currentRound} of ${totalRounds}`;\n        if ([T_STOPWATCH, T_COUNTDOWN].includes(selectedTimer)) return `Counting to ${formatTime(stopTime)}`;\n        if (selectedTimer === T_TABATA) return `${mode} -  Round ${currentRound} of ${totalRounds}`;\n    }\n\n    return <TimerContext.Provider \n            value={{ \n                currentRound, setCurrentRound,\n                mode, setMode,\n                statusMessage, setStatusMessage, \n                timerCounting, toggleCounting, setTimerCounting,\n                counter, setCounter,\n                isFrontSide, toggleSide,\n                isComplete, setToComplete,\n                isTimerOver, startTimer, pauseTimer, resetTimer, initializeTimer, \n                exitTimer, completeTimer, messenger, \n                ...settingsContext\n\n            }}>\n            {children}\n        </TimerContext.Provider>;\n};\n\nexport default TimerProvider;","import PropTypes from 'prop-types';\nimport './Container.css';\n\nconst Container = ({...props}) => {\n  const { children }  = props;\n  return <div className=\"container\">{children}</div>;\n}\n\n\nContainer.propTypes  = {\n  children: PropTypes.node\n}\n\nexport default Container;","import styled from \"styled-components\";\n\n\nconst Section = styled.div`\n  width: 90%;\n  margin: 2rem;\n  min-width: 35rem;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  margin-bottom: 10rem;\n\n`;\n\nconst Article = styled.div`\n  width: 100%;\n  height: 100%;\n  border-radius: 3rem;\n  box-shadow: 0.8rem 0.8rem 1.4rem var(--bgLight-2), -0.2rem -0.2rem 1.8rem var(--tint);\n  transition: transform 1s;\n  transform-style: preserve-3d;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  padding: 2rem;\n`;\n\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 2rem;\n`;\n\nconst RenderComponent = styled.div`\n  margin: 4rem 0;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = ({title, component, propDocs}) => {\n  return (\n    <Section>\n          <Title>{title}</Title>\n          <RenderComponent>{component}</RenderComponent>\n          <Article>\n            <Documentation>\n              <tbody>\n              <tr key={1}>\n                <th>Prop</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Default value</th>\n              </tr>\n              {propDocs.map((doc, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{doc.prop}</td>\n                    <td>{doc.description}</td>\n                    <td>{doc.type}</td>\n                    <td>\n                      <code>{doc.defaultValue}</code>\n                    </td>\n                  </tr>\n                );\n              })}\n              </tbody>\n            </Documentation>\n          </Article>\n    </Section>\n  );\n}\n\nexport default DocumentComponent;\n","import  { useContext, useEffect } from 'react';\nimport './Display.css';\nimport PropTypes from 'prop-types';\nimport {  TimerContext } from '../../../platform/TimerProvider';\nimport * as utils from \"../../../utils/helpers\";\nimport className from 'classnames';\n\nconst Display = () => {\n    const { counter, timerCounting,  statusMessage, setStatusMessage, \n        messenger, isComplete, setCounter, startTime, selectedTimer } = useContext(TimerContext);\n\n    const successStyle = [{\n        [`${selectedTimer.toLowerCase()}`]: !isComplete, \n        \"success\": isComplete\n    }];\n\n    useEffect(() => {\n        setCounter(startTime);\n    }, [setCounter, startTime])\n\n    useEffect(() => {\n        setStatusMessage(messenger());\n    }, [setStatusMessage, messenger]);\n\t\t\n    return (\n\n        // Return is stylized circular display\n        <div className=\"display_circular\">\n            <div className=\"marker\">\n                { statusMessage && <p className={className(\"header\", successStyle)}>{ statusMessage }</p>}\n                {!isComplete && <p className={className(\"value neonText\", successStyle)}>{ utils.formatTime(counter) }</p>}\n                {isComplete && <p className={className(\"value neonText\", successStyle)}>Nice!</p>}\n            </div>\n        \n            { \n                // Animate if timer is on\n                !!timerCounting && \n                    <>\n                        <div className=\"display_circular_back-1\"></div>\n                        <div className=\"display_circular_back-2\"></div>\n                    </>\n            }\n        </div>\n\n    );\n}\n\n\nDisplay.propTypes = {\n\ttimerCounting: PropTypes.bool,\n    statusMessage: PropTypes.string,\n    counter: PropTypes.string\n}\n\n\nexport default Display;\n","import  { useContext } from 'react';\nimport {  TimerContext } from '../../../platform/TimerProvider';\nimport './Button.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Button =  ({...props}) => {\n    const { selectedTimer } = useContext(TimerContext);\n    const { \n        id,\n        value = \"\",\n        isIconButton = false, \n        iconName = \"\", \n        classifiers = \"btn_primary\", \n        iconVisible = true,\n        children, \n        ...buttonAttributes} = props; \n\n\n    const buttonStyle = [{\n        \"icon_btn\": isIconButton,\n        [`icon_btn_${selectedTimer.toLowerCase()}`]: true,\n        \"btn\": !isIconButton,\n        [`btn_primary_${selectedTimer.toLowerCase()}`]: true\n    }];\n\n    const iconVisibility = [{\n        \"show\": iconVisible,\n        \"hide\": !iconVisible\n    }];\n\n    return (   \n\n        // Returns a stylized text or icon button\n        <div id={id} value={value} className={className(buttonStyle, classifiers)} { ...buttonAttributes} >\n            { isIconButton && \n                <ion-icon value={value} class={className(iconVisibility)} name={iconName}></ion-icon>\n            }\n            {!isIconButton && children}\n        </div>\n    );\n\n}\n\nButton.propTypes = {\n    id: PropTypes.string,\n    value: PropTypes.string,\n    isIconButton:  PropTypes.bool,\n    iconName: PropTypes.string,\n    classifiers: PropTypes.string,\n    iconVisible: PropTypes.bool,\n\tonClick: PropTypes.func.isRequired\n}\n\nexport default Button;\n","import { useState, useEffect } from 'react';\nimport './Input.css';\nimport PropTypes from 'prop-types';\n\nconst Input = ({...props}) => {\n\n    const { label, placeholder, ...inputAttributes } = props;\n    const [value, setValue] = useState(props.value);\n\n\n    // Update the context with the new prop value\n    useEffect(() => {\n        setValue(props.value);\n    }, [setValue, props.value]);\n    \n\n    const handleChange = (e) => {\n        setValue(e.target.value);\n        if (props.onChange) props.onChange(e);\n    }\n\n    return (\n        <>\n        {label && \n            <fieldset>\n                <label className=\"settings-label\" >{label}</label>\n                <input  {...inputAttributes} value={value} placeholder={placeholder} onChange={handleChange} />\n            </fieldset>\n        }\n        </>\n    );\n\n}\n\nInput.propTypes = {\n    label: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.instanceOf(Date)]),\n    placeholder: PropTypes.string,\n}\n\nexport default Input;","import { useContext } from 'react';\nimport { TimerContext } from '../../../platform/TimerProvider';\nimport { Fragment } from 'react';\nimport './Tabs.css';\nimport PropTypes from 'prop-types';\nimport className from 'classnames';\n\nconst Tabs = ({ tabItems }) => {\n\n    const {selectedTimer, setSelectedTimer, setTimerCounting } = useContext(TimerContext);\n    \n    // select tab if included in tab list provided, otherwise select first item in tab list\n    const tabSelected  = tabItems.includes(selectedTimer)? selectedTimer : tabItems[0];\n\n    // Tab style\n    const tabStyle = [{\n        [`${selectedTimer.toLowerCase()}`]: true, \n    }];\n    \n    const handleChange =  (e) => {\n        const value = e.target.value || tabSelected;\n        setSelectedTimer(value);\n        setTimerCounting(false);\n    }\n\n    return  (\n        <div className=\"btn_bar\">\n            <div className=\"tab_control\">\n                { tabItems.length <= 4 && tabItems.map((tabItem, index) =>\n                    <Fragment key={index}>\n                        <input  type=\"radio\" \n                                name={\"radio\" + (index + 1)} \n                                value={tabItem} \n                                id={\"tab-\" + (index + 1)} \n                                checked={tabSelected === tabItem} \n                                onChange={handleChange}\n                        />\n                        <label htmlFor={\"tab-\" + (index + 1)} \n                                className={className(tabStyle, \"tab_control_\" + (index+1))}>\n                            <p>{tabItem}</p>\n                        </label>\n                    </Fragment>\n                )}\n                <div className=\"tab_control_color\"></div>\n            </div>\n        </div>\n    );\n}\n\n\nTabs.propTypes = {\n    tabItems: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Tabs;","import './Card.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Card =  ({...props}) => {\n    const { side =\"front\", children } = props;\n\n    const cardStyle = [{\n        [`panel_face_${side}`]: side? true : false\n    }];\n\n    return (\n        <div className={className(cardStyle)}>\n            { children }\n        </div>\n    );\n}\n\nCard.propTypes = {\n    side: PropTypes.string,\n    children: PropTypes.node\n}\n\nexport default Card;","import './Panel.css';\nimport PropTypes from 'prop-types';\n\nconst Panel =  ({...props}) => {\n  const { id = \"\", children }  = props;\n\n  return (\n    <div className=\"panel\">\n        <div className=\"panel_inner\" id={id}>\n            {children}\n        </div>\n    </div>\n  );\n}\n\n\nPanel.propTypes  = {\n  id: PropTypes.string,\n  children: PropTypes.node\n}\n\nexport default Panel;","import styled from \"styled-components\";\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\nimport Display from \"../components/generic/Display/Display\";\nimport Button from \"../components/generic/Button/Button\";\nimport Input from \"../components/generic/Input/Input\";\nimport Tabs from \"../components/generic/Tabs/Tabs\";\nimport Card from \"../components/generic/Card/Card\";\nimport Panel from \"../components/generic/Panel/Panel\";\nimport { T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA } from \"../utils/helpers\";\n\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\n\nconst Documentation = () => {\n\n\n  const flip = () => {\n    const card = document.querySelector(\"#testcard\");\n    if (card) card.classList.toggle('is-flipped');\n  }\n\n  return (\n    <>\n      <Title>Documentation</Title>\n\n      <DocumentComponent\n        title=\"Circular Display \"\n        component={<Display />}\n        propDocs={[\n          {\n            prop: \"timerCounting\",\n            description: \"Animates the circular display\",\n            type: \"bool\",\n            defaultValue: \"Registered in context. Optional. Default: false \",\n          },\n          {\n            prop: \"counter\",\n            description: \"Value to be displayed\",\n            type: \"string\",\n            defaultValue: \"Registered in context. Optional. Default: 00:00:00\",\n          },\n          {\n            prop: \"statusMessage\",\n            description: \"Status message that can be used for rounds/rest\",\n            type: \"string\",\n            defaultValue: \"Registered in context. Optional. Default: None\",\n          }\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Button \"\n        component={<Button onClick={() => console.log(\"test\")}>Text Button</Button>}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the button\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Identifier for the action useful to identify the event\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"isIconButton\",\n            description: \"Creates an icon button\",\n            type: \"boolean\",\n            defaultValue: \"Optional. Default: false\"\n          },\n          {\n            prop: \"iconName\",\n            description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"iconVisible\",\n            description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: true\"\n          },\n          {\n            prop: \"classifiers\",\n            description: \"CSS classes to append additional styles\",\n            type:  \"string\",\n            defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n          },\n          {\n            prop: \"onClick\",\n            description: \"Event handler for clicking on a button\",\n            type:  \"function\",\n            defaultValue:  \"Required. Default: None\"\n          },\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Button (with Icon configuration)\"\n        component={<Button \n          id = \"settings_btn\"\n          value=\"settings\"\n          classifiers = \"secondary\"\n          isIconButton = {true}\n          onClick={()=>console.log(\"icon button\")}\n          iconName=\"settings\"\n        />}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the button\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Identifier for the action useful to identify the event\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"isIconButton\",\n            description: \"Creates an icon button\",\n            type: \"boolean\",\n            defaultValue: \"Optional. Default: false\"\n          },\n          {\n            prop: \"iconName\",\n            description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"iconVisible\",\n            description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: true\"\n          },\n          {\n            prop: \"classifiers\",\n            description: \"CSS classes to append additional styles\",\n            type:  \"string\",\n            defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n          },\n          {\n            prop: \"onClick\",\n            description: \"Event handler for clicking on a button\",\n            type:  \"function\",\n            defaultValue:  \"Required. Default: None\"\n          },\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Input \"\n        component={<Input label=\"Test Label\" value=\"\" />}\n        propDocs={[\n          {\n            prop: \"label\",\n            description: \"Label of the input field\",\n            type: \"String\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Initial value passed to the input\",\n            type: \"String, Number or Date\",\n            defaultValue: \"Registered in context. Optional. Default: None\",\n          },\n          {\n            prop: \"placeholder\",\n            description: \"Input placeholder text\",\n            type: \"String\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"onChange\",\n            description: \"Event handler for capturing keyboard inputs\",\n            type:  \"function\",\n            defaultValue:  \"Optional. Default: None\"\n          },\n          {\n            prop: \"Other\",\n            description: \"All other HTML input attributes are supported\"\n          }\n\n\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Tabs \"\n        component={<Tabs tabItems={[T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA]} />}\n        propDocs={[\n          {\n            prop: \"tabItems\",\n            description: \"Array of tab labels. Max 4 tabs. If more, the control will not render\",\n            type: \"Array of strings\",\n            defaultValue: \"Optional. Default: []\",\n          },\n          {\n            prop: \"selectedTimer\",\n            description: \"Selected tab is registered in context\",\n            type: \"string\",\n            defaultValue: \"Registered in context. Optional. Default: None\",\n          }\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Card \"\n        component={\n          <Panel id=\"testcard\">\n            <Card side=\"front\">\n              front side\n              <Button onClick={flip}>Flip</Button>\n            </Card>\n            <Card side=\"back\">\n              back side\n              <Button onClick={flip}>Flip Again</Button>\n            </Card>\n          </Panel>}\n        propDocs={[\n          {\n            prop: \"side\",\n            description: `Card container that flips using css. \n            Two Cards (front and back) need to be defined in order for flipping to work`,\n            type: \"string\",\n            defaultValue: \"Optional. Default: 'front'. Possible values: 'front' |  'back'\",\n          },\n          {\n            prop: \"Children Nodes\",\n            description: `Accepts any React and HTML valid nodes. \n            An event within a child element of the card could trigger the flipping.\n            The event handler should query the id of Panel container and apply toggle('is-flipped') to\n            the queried element`,\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      /> \n\n      <DocumentComponent\n        title=\"Panel \"\n        component={<Panel >Content goes here</Panel>}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the panel that will allow flipping the cards\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"Children Nodes\",\n            description: \"Accepts any React and HTML valid nodes\",\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Container \"\n        component=\"Generic Empty Container\"\n        propDocs={[\n          {\n            prop: \"Children Nodes\",\n            description: \"Accepts any React and HTML valid nodes\",\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />           \n\n\n    </>\n  );\n\n}\n\nexport default Documentation;\n","import { useContext  } from 'react';\nimport {  TimerContext } from '../../platform/TimerProvider';\nimport { TIMER_SETTINGS } from '../../utils/helpers';\nimport PropTypes from 'prop-types';\nimport Card from \"./Card/Card\";\nimport Display from \"./Display/Display\";\nimport Input from \"./Input/Input\";\nimport Button  from \"./Button/Button\";\nimport className from 'classnames';\n\nconst CONFIG = TIMER_SETTINGS.configurations;\n\nconst Timer = () => {\n\n  const { ...context } = useContext(TimerContext);\n  const { resetTimer, timerCounting, toggleCounting, toggleSide, completeTimer, selectedTimer, isComplete, setSettings } = context;\n  const settings = TIMER_SETTINGS.schema[selectedTimer];\n\n  // play button style\n  const playButtonStyle = [{\n    \"primary\": true,\n    \"disabled\": isComplete\n  }];\n\n\n  // Flips the card to display settings\n  const flipSide = () => {\n      toggleSide();\n      const card = document.querySelector(\"#timer_panel\");\n      if (card) card.classList.toggle('is-flipped');\n  }\n\n  // Save settings  to context\n  const saveSettings  = () => {\n    const inputSettings = {};\n    settings.forEach((setting) => {\n      const input = document.querySelector(`#${setting.id}`)?.value;\n      inputSettings[setting.id] = parseInt(input) || 0;\n\n    });\n    // save the settings to the context\n    setSettings(inputSettings);\n    flipSide();\n  }\n\n  return (\n    <>\n      <Card side=\"front\">\n        <Display  />\n\n        <div className=\"btn_bar\">\n            {timerCounting &&\n                  <Button \n                      id = \"pause_btn\"\n                      value=\"pause\"\n                      classifiers=\"primary\"\n                      isIconButton={true} \n                      onClick={toggleCounting} \n                      iconName=\"pause\"\n                  />\n            }\n\n            {!timerCounting &&\n                  <Button \n                      id = \"start_btn\"\n                      value=\"start\"\n                      classifiers={className(playButtonStyle)}\n                      isIconButton={true} \n                      onClick={toggleCounting} \n                      iconName=\"play\"\n                  />\n            \n            }\n\n            {timerCounting && \n              <Button \n              id = \"complete\"\n              value=\"complete\"\n              classifiers = \"primary\"\n              isIconButton = {true}\n              onClick={completeTimer}\n              iconName=\"play-forward-outline\"\n            />\n            \n            }\n            {!timerCounting &&\n              <Button \n                id = \"reset_btn\"\n                value=\"reset\"\n                classifiers = \"primary\"\n                isIconButton = {true}\n                onClick={resetTimer}\n                iconName=\"refresh-outline\"\n              />\n            }\n          \n            {settings && <Button \n              id = \"settings_btn\"\n              value=\"settings\"\n              classifiers = \"secondary\"\n              isIconButton = {true}\n              onClick={flipSide}\n              iconName=\"settings\"\n            />}\n        </div>\n      </Card>\n      <Card side=\"back\">\n            <h1>Settings</h1>\n            {settings && \n              <div className=\"settings-form\" id=\"inputs\">\n                  {settings.map((setting, index) => \n                      <Input  key={index}\n                              label={setting.label} \n                              type=\"number\"\n                              placeholder={`Between ${CONFIG[setting.type]?.min} and ${CONFIG[setting.type]?.max}`} \n                              value={context[setting.id]}\n                              id={setting.id}\n                      />\n                      )\n                  }\n              </div>\n              }\n            <div className=\"btn_bar\">\n              <Button \n                  id = \"back_btn\"\n                  value=\"back\"\n                  isIconButton = {true}\n                  onClick={flipSide}\n                  iconName=\"arrow-back-outline\"\n              />\n              <Button onClick={saveSettings}>\n                Save\n              </Button>\n            </div>\n      </Card>\n    </>\n  );\n\n\n  \n}\n\nTimer.propTypes = {\n  settings: PropTypes.object,\n}\n\nexport default Timer;\n","import { useContext, useState } from 'react';\nimport {  TimerContext } from '../platform/TimerProvider'; \nimport { useTimerStarter, useTimerInitializer  } from './timerhooks';\nimport { TIMER_SETTINGS, loadFromStorage } from '../utils/helpers';\n\nexport const useTimer = () => {\n\n    const { ...context } = useContext(TimerContext);\n    const { selectedTimer } = context;\n    \n    // Load from browser local storage if available. Otherwise load from timers.json\n    const [inputSettings] = useState(loadFromStorage(selectedTimer) || TIMER_SETTINGS.settings[selectedTimer]);\n\n    useTimerInitializer(inputSettings, context);\n\n    useTimerStarter(context);\n\n}","import { useEffect, useRef } from 'react';\n\n// Hook used to start the timers\nexport const useTimerStarter = (context) => {\n  \n  const {timerCounting, startTimer, isTimerOver, pauseTimer, completeTimer} = context;\n  const runningTimer = useRef();\n\n  useEffect(() => {\n    if (timerCounting && !isTimerOver()) runningTimer.current = startTimer()\n    else if (isTimerOver()) completeTimer();\n    else pauseTimer(runningTimer.current); \n    return () => pauseTimer(runningTimer.current);\n  }, [timerCounting, startTimer, isTimerOver, pauseTimer, completeTimer]);\n\n  return  runningTimer.current;\n\n};\n\n//Hook use to initialize timers\nexport const useTimerInitializer = (inputSettings, context) => {\n\n  const {setSettings, exitTimer } = context; \n\n  useEffect(() => {\n    \n    setSettings(inputSettings);\n\n    // on exit reinitialize to input settings\n    return () => exitTimer();\n    \n\n  }, [setSettings, exitTimer, inputSettings]);  \n}","import Timer from \"../generic/Timer\";\nimport { useTimer } from \"../../hooks/useTimer\";\n\nconst StopWatch = ()  =>  {\n\n  /* \n   * Object for each type of timer for potential \n   * parallel running down the road\n  */\n\n  // Hook for the timer\n  useTimer();\n\n  // Render the generic timer\n  return <Timer />\n\n}\n\nexport default StopWatch;\n","import Timer from '../../components/generic/Timer';\nimport { useTimer } from \"../../hooks/useTimer\";\n\nconst Countdown = () => {\n\n  /* \n   * Object for each type of timer for potential \n   * parallel running down the road\n  */\n\n  // Hook for the timer\n  useTimer();\n\n  // Render the generic timer\n  return <Timer />\n  \n}\n\nexport default Countdown;\n","import Timer from \"../generic/Timer\";\nimport { useTimer } from '../../hooks/useTimer'\n\nconst XY = () => {\n\n  /* \n   * Object for each type of timer for potential \n   * parallel running down the road\n  */\n\n  // Hook for the timer\n  useTimer();\n\n  // Render the generic timer\n  return <Timer />\n\n}\n\nexport default XY;","import Timer from \"../generic/Timer\";\nimport { useTimer } from '../../hooks/useTimer';\n\nconst Tabata = ()  => {\n  \n  /* \n   * Object for each type of timer for potential \n   * parallel running down the road\n  */\n\n  // Hook for the timer\n  useTimer();\n\n  // Render the generic timer\n  return <Timer />\n  \n}\n\nexport default Tabata;","import { useContext } from 'react';\nimport { TimerContext } from '../platform/TimerProvider';\nimport Tabs  from \"../components/generic/Tabs/Tabs\";\nimport Panel from \"../components/generic/Panel/Panel\";\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\nimport * as utils from '../utils/helpers.js';\nimport { T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA } from '../utils/helpers';\n\nconst TimersView = () => {\n\n  const { selectedTimer, setSelectedTimer } = useContext(TimerContext);\n\n  const timers = [\n    { title: T_STOPWATCH, C: <Stopwatch   /> },\n    { title: T_COUNTDOWN, C: <Countdown  /> },\n    { title: T_XY, C: <XY /> },\n    { title: T_TABATA, C: <Tabata  /> },\n  ];\n\n\n  const handleChange =  (v) => {\n    setSelectedTimer(v);\n  }\n\n  return (\n    <>\n      <Tabs tabItems={utils.readCollection(timers, 'title')} \n            onChange={handleChange} />\n      <Panel id=\"timer_panel\">\n        {utils.getTimer(selectedTimer, timers)}\n      </Panel>\n    </>\n\n  );\n  \n\n}\n\n\nexport default TimersView;\n","import React from \"react\";\nimport TimerProvider from './platform/TimerProvider';\nimport SettingsProvider from \"./platform/SettingsProvider\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Container from \"./components/generic/Container/Container\";\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\n\n\nconst App = () => {\n\n  return (\n      <Router>\n        <SettingsProvider>\n            <TimerProvider>\n            <nav className=\"navigation\">\n                <ul>\n                  <li key={1}>\n                    <Link to=\"/\">Timers</Link>\n                  </li>\n                  <li key={2}>\n                    <Link to=\"/docs\">Documentation</Link>\n                  </li>\n                </ul>\n              </nav>\n              <br />\n              <Container>\n                <Switch>\n                    <Route path=\"/docs\">\n                      <DocumentationView />\n                    </Route>\n                    <Route path=\"/\">\n                      <TimersView />\n                    </Route>\n                  </Switch>\n              </Container>\n              </TimerProvider>\n          </SettingsProvider>\n      </Router>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}