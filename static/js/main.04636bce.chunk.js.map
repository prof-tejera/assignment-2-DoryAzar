{"version":3,"sources":["components/generic/Container/Container.js","components/documentation/DocumentComponent.js","components/generic/Display/Display.js","components/generic/Button/Button.js","components/generic/Input/Input.js","components/generic/Tabs/Tabs.js","components/generic/Card/Card.js","components/generic/Panel/Panel.js","components/generic/Timer.js","views/DocumentationView.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","utils/helpers.js","views/TimersView.js","App.js","index.js"],"names":["Container","children","className","Section","styled","div","Article","Title","RenderComponent","Documentation","table","DocumentComponent","title","component","propDocs","map","doc","index","prop","description","type","defaultValue","Display","props","isStarted","value","status","Button","id","isIconButton","iconName","classifiers","iconVisible","buttonAttributes","buttonStyle","iconVisibility","class","name","Input","label","placeholder","inputAttributes","useState","setValue","onChange","e","target","Tabs","tabItems","tabSelected","setTabSelected","handleChange","length","tabItem","checked","htmlFor","Card","side","cardStyle","Panel","Timer","settings","timerCounting","setTimerCounting","isFrontSide","setFront","statusMessage","startTime","counter","setCounter","toggleCount","flipSide","card","document","querySelector","classList","toggle","onClick","console","log","setting","flip","StopWatch","Countdown","XY","Tabata","getTimer","timerName","arr","find","timer","C","TimersView","keyName","selectedTimer","setSelectedTimer","timers","Stopwatch","item","v","utils","App","to","path","DocumentationView","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.04636bce.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport './Container.css';\n\nconst Container = ({...props}) => {\n  const { children }  = props;\n  return <div className=\"container\">{children}</div>;\n}\n\n\nContainer.propTypes  = {\n  children: PropTypes.node\n}\n\nexport default Container;","import styled from \"styled-components\";\n\n\nconst Section = styled.div`\n  width: 90%;\n  margin: 2rem;\n  min-width: 35rem;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  margin-bottom: 10rem;\n\n`;\n\nconst Article = styled.div`\n  width: 100%;\n  height: 100%;\n  border-radius: 3rem;\n  box-shadow: 0.8rem 0.8rem 1.4rem var(--bgLight-2), -0.2rem -0.2rem 1.8rem var(--tint);\n  transition: transform 1s;\n  transform-style: preserve-3d;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  padding: 2rem;\n`;\n\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 2rem;\n`;\n\nconst RenderComponent = styled.div`\n  margin: 4rem 0;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = ({title, component, propDocs}) => {\n  return (\n    <Section>\n          <Title>{title}</Title>\n          <RenderComponent>{component}</RenderComponent>\n          <Article>\n            <Documentation>\n              <tbody>\n              <tr key={1}>\n                <th>Prop</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Default value</th>\n              </tr>\n              {propDocs.map((doc, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{doc.prop}</td>\n                    <td>{doc.description}</td>\n                    <td>{doc.type}</td>\n                    <td>\n                      <code>{doc.defaultValue}</code>\n                    </td>\n                  </tr>\n                );\n              })}\n              </tbody>\n            </Documentation>\n          </Article>\n    </Section>\n  );\n}\n\nexport default DocumentComponent;\n","import './Display.css';\nimport PropTypes from 'prop-types';\n\nconst Display = ({...props}) => {\n    const {isStarted = false, value = \"00:00:00\", status = \"\" } = props;\n\t\t\n    return (\n\n        // Return is stylized circular display\n        <div className=\"display_circular\">\n            <div className=\"marker\">\n                { status && <p className=\"header\">{ status }</p>}\n                <p className=\"value neonText\">{ value }</p>\n            </div>\n        \n            { \n                // Animate if timer is on\n                !!isStarted && \n                    <>\n                        <div className=\"display_circular_back-1\"></div>\n                        <div className=\"display_circular_back-2\"></div>\n                    </>\n            }\n        </div>\n\n    );\n}\n\n\nDisplay.propTypes = {\n\tisStarted: PropTypes.bool,\n    value: PropTypes.string,\n    status: PropTypes.string\n}\n\n\nexport default Display;\n","import './Button.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Button =  ({...props}) => {\n    const { \n        id,\n        value = \"\",\n        isIconButton = false, \n        iconName = \"\", \n        classifiers = \"btn_primary\", \n        iconVisible = true,\n        children, \n        ...buttonAttributes} = props; \n\n    const buttonStyle = [{\n        \"icon_btn\": isIconButton,\n        \"btn\": !isIconButton\n    }];\n\n    const iconVisibility = [{\n        \"show\": iconVisible,\n        \"hide\": !iconVisible\n    }];\n\n    return (   \n\n        // Returns a stylized text or icon button\n        <div id={id} value={value} className={className(buttonStyle, classifiers)} { ...buttonAttributes} >\n            { isIconButton && \n                <ion-icon value={value} class={className(iconVisibility)} name={iconName}></ion-icon>\n            }\n            {!isIconButton && children}\n        </div>\n    );\n\n}\n\nButton.propTypes = {\n    id: PropTypes.string,\n    value: PropTypes.string,\n    isIconButton:  PropTypes.bool,\n    iconName: PropTypes.string,\n    classifiers: PropTypes.string,\n    iconVisible: PropTypes.bool,\n\tonClick: PropTypes.func.isRequired\n}\n\nexport default Button;\n","import { useState } from 'react';\nimport './Input.css';\nimport PropTypes from 'prop-types';\n\nconst Input = ({...props}) => {\n    \n    const { label, placeholder, ...inputAttributes } = props;\n    const [value, setValue] = useState(props.value ?? \"\")\n\n    const handleChange = (e) => {\n        setValue(e.target.value);\n        if (props.onChange) props.onChange(e);\n    }\n\n    return (\n        <>\n        {label && \n            <fieldset>\n                <label className=\"settings-label\" >{label}</label>\n                <input  {...inputAttributes} value={value} placeholder={placeholder} onChange={handleChange} />\n            </fieldset>\n        }\n        </>\n    );\n\n}\n\nInput.propTypes = {\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func\n}\n\nexport default Input;","import { useState } from 'react';\nimport { Fragment } from 'react';\nimport './Tabs.css';\nimport PropTypes from 'prop-types';\n\nconst Tabs = ({...props}) => {\n    const { tabItems = []  } = props;\n    const [tabSelected, setTabSelected] = useState(tabItems? tabItems[0] : \"\");\n    \n    const handleChange =  (e) => {\n        const value = e.target.value || tabSelected;\n        setTabSelected(value)\n        if (props.onChange) props.onChange(e.target.value);\n    }\n\n    return  (\n        <div className=\"btn_bar\">\n            <div className=\"tab_control\">\n                { tabItems.length <= 4 && tabItems.map((tabItem, index) =>\n                    <Fragment key={index}>\n                        <input  type=\"radio\" \n                                name={\"radio\" + (index + 1)} \n                                value={tabItem} \n                                id={\"tab-\" + (index + 1)} \n                                checked={tabSelected === tabItem} \n                                onChange={handleChange}\n                        />\n                        <label htmlFor={\"tab-\" + (index + 1)} \n                                className={\"tab_control_\" + (index+1)}>\n                            <p>{tabItem}</p>\n                        </label>\n                    </Fragment>\n                )}\n                <div className=\"tab_control_color\"></div>\n            </div>\n        </div>\n    );\n}\n\n\nTabs.propTypes = {\n    tabItems: PropTypes.arrayOf(PropTypes.string),\n    onChange: PropTypes.func\n}\n\nexport default Tabs;","import './Card.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Card =  ({...props}) => {\n    const { side =\"front\", children } = props;\n\n    const cardStyle = [{\n        [`panel_face_${side}`]: side? true : false\n    }];\n\n    return (\n        <div className={className(cardStyle)}>\n            { children }\n        </div>\n    );\n}\n\nCard.propTypes = {\n    side: PropTypes.string,\n    children: PropTypes.node\n}\n\nexport default Card;","import './Panel.css';\nimport PropTypes from 'prop-types';\n\nconst Panel =  ({...props}) => {\n  const { id = \"\", children }  = props;\n\n  return (\n    <div className=\"panel\">\n        <div className=\"panel_inner\" id={id}>\n            {children}\n        </div>\n    </div>\n  );\n}\n\n\nPanel.propTypes  = {\n  id: PropTypes.string,\n  children: PropTypes.node\n}\n\nexport default Panel;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from \"./Card/Card\";\nimport Display from \"./Display/Display\";\nimport Input from \"./Input/Input\";\nimport Button  from \"./Button/Button\";\n\nconst Timer = ({...props}) => {\n\n  const { settings = null } = props;\n  const [timerCounting, setTimerCounting] = useState(false);\n  const [isFrontSide, setFront] =  useState(true);\n  const [statusMessage] = useState(props.statusMessage ||  \"\");\n  const [counter, setCounter] = useState(props.startTime || \"00:00:00\");\n\n  // Toggle the counter and hand-off to parent timer\n  const toggleCount = (e) => {\n      setTimerCounting(!timerCounting);\n      if (props.onChange) props.onChange(e);\n  }\n\n  // Flips the card to display settings\n  const flipSide = () => {\n      setFront(!isFrontSide);\n      const card = document.querySelector(\"#timer_panel\");\n      if (card) card.classList.toggle('is-flipped');\n  }\n\n  // Save settings\n  const saveSettings  = (e) => {\n    console.log(e.target);\n  }\n\n  // Reset the counter\n  const reset = (e) => {\n    setCounter(props.startTime || \"00:00:00\");\n    console.log(\"reset\");\n  }\n\n  return (\n    <>\n      <Card side=\"front\">\n        <Display isStarted={timerCounting} \n                 status = { statusMessage}\n                 value={counter} />\n\n        <div className=\"btn_bar\">\n            {timerCounting &&\n                  <Button \n                      id = \"pause_btn\"\n                      value=\"pause\"\n                      classifiers=\"primary\" \n                      isIconButton={true} \n                      onClick={toggleCount} \n                      iconName=\"pause\"\n                  />\n            }\n            {!timerCounting && \n                  <Button \n                      id = \"start_btn\"\n                      value=\"start\"\n                      classifiers=\"primary\" \n                      isIconButton={true} \n                      onClick={toggleCount} \n                      iconName=\"play\"\n                  />\n            \n            }\n\n            <Button \n              id = \"reset_btn\"\n              value=\"reset\"\n              classifiers = \"primary\"\n              isIconButton = {true}\n              onClick={reset}\n              iconName=\"refresh-outline\"\n            />\n          \n            {settings && <Button \n              id = \"settings_btn\"\n              value=\"settings\"\n              classifiers = \"secondary\"\n              isIconButton = {true}\n              onClick={flipSide}\n              iconName=\"settings\"\n            />}\n        </div>\n      </Card>\n      <Card side=\"back\">\n            <h1>Settings</h1>\n            {settings && \n              <div className=\"settings-form\">\n                  {settings.map((setting, index) =>  \n                      <Input key={index} \n                             label={setting.label} \n                              placeholder={setting.placeholder} \n                              value={setting.value} \n                              id={`settings${index}`}\n                      />)\n                  }\n              </div>\n              }\n            <div className=\"btn_bar\">\n              <Button \n                  id = \"back_btn\"\n                  value=\"back\"\n                  isIconButton = {true}\n                  onClick={flipSide}\n                  iconName=\"arrow-back-outline\"\n              />\n              <Button onClick={saveSettings}>\n                Save\n              </Button>\n            </div>\n      </Card>\n    </>\n  );\n\n\n  \n}\n\nTimer.propTypes = {\n  settings: PropTypes.array,\n  statusMessage: PropTypes.string,\n  startTime: PropTypes.string,\n  onChange: PropTypes.func\n}\n\nexport default Timer;\n","import styled from \"styled-components\";\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\nimport Display from \"../components/generic/Display/Display\";\nimport Button from \"../components/generic/Button/Button\";\nimport Input from \"../components/generic/Input/Input\";\nimport Tabs from \"../components/generic/Tabs/Tabs\";\nimport Card from \"../components/generic/Card/Card\";\nimport Panel from \"../components/generic/Panel/Panel\";\nimport Timer from \"../components/generic/Timer\";\n\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\nconst Documentation = () => {\n  \n  const flip = () => {\n    const card = document.querySelector(\"#testcard\");\n    if (card) card.classList.toggle('is-flipped');\n  }\n\n  return (\n    <>\n      <Title>Documentation</Title>\n\n\n      <DocumentComponent\n        title=\"Generic Timer\"\n        component={<Panel><Timer /></Panel>}\n        propDocs={[\n          {\n            prop: \"settings\",\n            description: \"Collection that defines the allowed settings for a timer\",\n            type: \"array of objects - [{label: 'label1', value: 'value1', placeholder: 'placeholder1'}, {...}]\",\n            defaultValue: \"Optional. Default: []\",\n          },\n          {\n            prop: \"statusMessage\",\n            description: \"Status message that can be used for rounds/rest\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"startTime\",\n            description: \"Starting time for the timer\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: 00:00:00\",\n          },\n          {\n            prop: \"onChange\",\n            description: \"Event handler for capturing values input on change\",\n            type: \"function\",\n            defaultValue: \"Optional. Default: None\",\n          }\n\n        ]}\n      />   \n\n      <DocumentComponent\n        title=\"Circular Display \"\n        component={<Display isStarted={true} status=\"Status Text\" value=\"00:10:00\" />}\n        propDocs={[\n          {\n            prop: \"isStarted\",\n            description: \"Animates the circular display\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: false\",\n          },\n          {\n            prop: \"status\",\n            description: \"Status message that can be used for rounds/rest\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Value to be displayed\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: 00:00:00\",\n          }\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Button \"\n        component={<Button onClick={() => console.log(\"test\")}>Text Button</Button>}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the button\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Identifier for the action useful to identify the event\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"isIconButton\",\n            description: \"Creates an icon button\",\n            type: \"boolean\",\n            defaultValue: \"Optional. Default: false\"\n          },\n          {\n            prop: \"iconName\",\n            description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"iconVisible\",\n            description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: true\"\n          },\n          {\n            prop: \"classifiers\",\n            description: \"CSS classes to append additional styles\",\n            type:  \"string\",\n            defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n          },\n          {\n            prop: \"onClick\",\n            description: \"Event handler for clicking on a button\",\n            type:  \"function\",\n            defaultValue:  \"Required. Default: None\"\n          },\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Button (with Icon configuration)\"\n        component={<Button \n          id = \"settings_btn\"\n          value=\"settings\"\n          classifiers = \"secondary\"\n          isIconButton = {true}\n          onClick={()=>console.log(\"icon button\")}\n          iconName=\"settings\"\n        />}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the button\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Identifier for the action useful to identify the event\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"isIconButton\",\n            description: \"Creates an icon button\",\n            type: \"boolean\",\n            defaultValue: \"Optional. Default: false\"\n          },\n          {\n            prop: \"iconName\",\n            description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"iconVisible\",\n            description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: true\"\n          },\n          {\n            prop: \"classifiers\",\n            description: \"CSS classes to append additional styles\",\n            type:  \"string\",\n            defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n          },\n          {\n            prop: \"onClick\",\n            description: \"Event handler for clicking on a button\",\n            type:  \"function\",\n            defaultValue:  \"Required. Default: None\"\n          },\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Input \"\n        component={<Input label=\"Test Label\" />}\n        propDocs={[\n          {\n            prop: \"label\",\n            description: \"Label of the input field\",\n            type: \"String\",\n            defaultValue: \"Required. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Initial value passed to the input\",\n            type: \"String\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"placeholder\",\n            description: \"Input placeholder text\",\n            type: \"String\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"onChange\",\n            description: \"Event handler for capturing keyboard inputs\",\n            type:  \"function\",\n            defaultValue:  \"Optional. Default: None\"\n          }\n\n\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Tabs \"\n        component={<Tabs tabItems={[\"Tab 1\", \"Tab 2\", \"Tab 3\", \"Tab 4\"]} />}\n        propDocs={[\n          {\n            prop: \"tabItems\",\n            description: \"Array of tab labels. Max 4 tabs. If more, the control will not render\",\n            type: \"Array of strings\",\n            defaultValue: \"Optional. Default: []\",\n          },\n          {\n            prop: \"onChange\",\n            description: \"Event handler for capturing the selected tab\",\n            type: \"function\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Card \"\n        component={\n          <Panel id=\"testcard\">\n            <Card side=\"front\">\n              front side\n              <Button onClick={flip}>Flip</Button>\n            </Card>\n            <Card side=\"back\">\n              back side\n              <Button onClick={flip}>Flip Again</Button>\n            </Card>\n          </Panel>}\n        propDocs={[\n          {\n            prop: \"side\",\n            description: `Card container that flips using css. \n            Two Cards (front and back) need to be defined in order for flipping to work`,\n            type: \"string\",\n            defaultValue: \"Optional. Default: 'front'. Possible values: 'front' |  'back'\",\n          },\n          {\n            prop: \"Children Nodes\",\n            description: `Accepts any React and HTML valid nodes. \n            An event within a child element of the card could trigger the flipping.\n            The event handler should query the id of Panel container and apply toggle('is-flipped') to\n            the queried element`,\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      /> \n\n      <DocumentComponent\n        title=\"Panel \"\n        component={<Panel >Content goes here</Panel>}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the panel that will allow flipping the cards\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"Children Nodes\",\n            description: \"Accepts any React and HTML valid nodes\",\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Container \"\n        component=\"Generic Empty Container\"\n        propDocs={[\n          {\n            prop: \"Children Nodes\",\n            description: \"Accepts any React and HTML valid nodes\",\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />           \n\n\n    </>\n  );\n\n}\n\nexport default Documentation;\n","import Timer from \"../generic/Timer\";\n\nconst settings = [\n  {label: \"Start Time\", value: \"00:00:00\", placeholder: \"Start the timer at this time\"},\n  {label: \"Stop Time\", value: \"00:30:00\", placeholder: \"Stop the timer at this time\"}\n];\n\nconst StopWatch = ()  =>  {\n  return <Timer statusMessage=\"Count to 00:30:00\" settings={settings} />;\n}\n\nexport default StopWatch;\n","import Timer from \"../generic/Timer\";\n\nconst settings = [\n  {label: \"Start Time\", value: \"00:30:00\", placeholder: \"Start the timer at this time\"},\n  {label: \"Stop Time\", value:\"00:10:00\", placeholder: \"Stop the timer at this time\"},\n  {label: \"Another setting\", placeholder: \"TBD\"}\n];\n\nconst Countdown = () => {\n  return <Timer statusMessage=\"Count from 00:30:00\"  startTime=\"00:30:00\" settings={settings} />;\n}\n\nexport default Countdown;\n","import Timer from \"../generic/Timer\";\n\nconst settings = [\n  {label: \"Start Time\", value: \"00:20:10\", placeholder: \"Start the timer at this time\"},\n  {label: \"Stop Time\", value:\"00:00:00\", placeholder: \"Stop the timer at this time\"},\n  {label: \"Rounds\", value:\"2\", placeholder: \"Stops after that many rounds\"}\n];\n\nconst XY = () => {\n  return <Timer statusMessage=\"Round 1 of 2\" startTime=\"00:20:10\" settings={settings} />;\n}\n\nexport default XY;","import Timer from \"../generic/Timer\";\n\nconst settings = [\n  {label: \"Work Time\", value: \"00:45:00\", placeholder: \"Start the timer at this time\"},\n  {label: \"Rest Time\", value:\"00:10:00\", placeholder: \"Timer will rest for that duration\"},\n  {label: \"Rounds\", value:\"2\", placeholder: \"Stops after that many rounds\"}\n];\n\nconst Tabata = ()  => {\n  return <Timer statusMessage=\"Work - Round 1 of 2\" startTime=\"00:45:00\" settings={settings} />;\n}\n\nexport default Tabata;","// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\n\nexport function readCollection(arr, keyName)  {\n    return arr.map((item) => {\n        return item[keyName];\n    });\n}\n\n\n\nexport function getTimer(timerName, arr)  {\n    function isTimer(timer) {\n        return timer.title === timerName;\n    }\n    return arr.find((isTimer)).C;\n}\n","import {  useState } from 'react';\n\nimport Tabs  from \"../components/generic/Tabs/Tabs\";\nimport Panel from \"../components/generic/Panel/Panel\";\n\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\nimport * as utils from '../utils/helpers.js';\n\nconst TimersView = () => {\n  \n  const [selectedTimer, setSelectedTimer] = useState(\"Stopwatch\");\n  \n  const timers = [\n    { title: \"Stopwatch\", C: <Stopwatch /> },\n    { title: \"Countdown\", C: <Countdown /> },\n    { title: \"XY\", C: <XY /> },\n    { title: \"Tabata\", C: <Tabata /> },\n  ];\n\n  const handleChange =  (v) => {\n    setSelectedTimer(v);\n  }\n\n  return (\n    <>\n      <Tabs tabItems={utils.readCollection(timers, 'title')} \n            onChange={handleChange} />\n      <Panel id=\"timer_panel\">\n        {utils.getTimer(selectedTimer, timers)}\n      </Panel>\n    </>\n\n  );\n  \n\n}\n\n\nexport default TimersView;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Container from \"./components/generic/Container/Container\";\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\n\n\nconst App = () => {\n  return (\n      <Router>\n        <nav className=\"navigation\">\n            <ul>\n              <li key={1}>\n                <Link to=\"/\">Timers</Link>\n              </li>\n              <li key={2}>\n                <Link to=\"/docs\">Documentation</Link>\n              </li>\n            </ul>\n          </nav>\n          <br />\n        <Container>\n          <Switch>\n              <Route path=\"/docs\">\n                <DocumentationView />\n              </Route>\n              <Route path=\"/\">\n                <TimersView />\n              </Route>\n            </Switch>\n        </Container>\n      </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}