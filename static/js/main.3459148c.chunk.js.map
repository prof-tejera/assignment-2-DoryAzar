{"version":3,"sources":["utils/helpers.js","hooks/useTimer.js","platform/AppProvider.js","components/generic/Container/Container.js","components/documentation/DocumentComponent.js","components/generic/Display/Display.js","components/generic/Button/Button.js","components/generic/Input/Input.js","components/generic/Tabs/Tabs.js","components/generic/Card/Card.js","components/generic/Panel/Panel.js","components/generic/Timer.js","views/DocumentationView.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","views/TimersView.js","App.js","index.js"],"names":["getTimer","timerName","arr","find","timer","title","C","formatTime","seconds","slice","fetchedMinutes","Math","floor","minutes","hours","T_STOPWATCH","T_COUNTDOWN","T_TABATA","TIMER_SETTINGS","timers","useTimer","useState","selectedTimer","setSelectedTimer","startTime","setStartTime","stopTime","setStopTime","totalRounds","setTotalRounds","currentRound","setCurrentRound","mode","setMode","statusMessage","setStatusMessage","timerCounting","setTimerCounting","counter","setCounter","isFrontSide","setIsFrontSide","toggleCounting","toggleSide","isOver","startTimer","setInterval","startCounting","pauseTimer","interval","clearInterval","resetTimer","completeTimer","messenger","initializeTimer","AppContext","React","createContext","AppProvider","children","settings","Provider","value","Container","className","Section","styled","div","Article","Title","RenderComponent","Documentation","table","DocumentComponent","component","propDocs","map","doc","index","prop","description","type","defaultValue","Display","useContext","useEffect","utils","Button","props","id","isIconButton","iconName","classifiers","iconVisible","buttonAttributes","buttonStyle","iconVisibility","class","name","Input","label","placeholder","inputAttributes","setValue","onChange","e","target","Tabs","tabItems","tabSelected","includes","handleChange","length","tabItem","checked","htmlFor","Card","side","cardStyle","Panel","Timer","setDisplayTime","toggleCount","flipSide","card","document","querySelector","classList","toggle","onClick","setting","flip","isStarted","status","console","log","SETTINGS_FORM","StopWatch","runningTimer","useRef","current","Countdown","XY","Tabata","TimersView","keyName","Stopwatch","item","v","App","to","path","DocumentationView","ReactDOM","render","StrictMode","getElementById"],"mappings":"inBAWaA,EAAW,SAACC,EAAWC,GAIhC,OAAOA,EAAIC,MAHX,SAAiBC,GACb,OAAOA,EAAMC,QAAUJ,KAEAK,GAYlBC,EAAa,SAACH,GACvB,IAAMI,EAAU,WAAKJ,EAAQ,IAAMK,OAAO,GACpCC,EAAc,UAAMC,KAAKC,MAAMR,EAAQ,KACvCS,EAAU,WAAIH,EAAiB,IAAKD,OAAO,GAC3CK,EAAQ,WAAIH,KAAKC,MAAMR,EAAQ,OAAQK,OAAO,GAEpD,MAAM,GAAN,OAAUK,EAAV,YAAmBD,EAAnB,YAA8BL,IAGrBO,EAAc,YACdC,EAAc,YACdC,EAAW,SAGXC,EAAiBC,ECtCjBC,EAAW,SAAChB,GAErB,MAA0CiB,mBAASjB,GAAnD,mBAAOkB,EAAP,KAAsBC,EAAtB,KACA,EAAkCF,mBAASH,EAAed,GAAf,WAA3C,mBAAOoB,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,mBAASH,EAAed,GAAf,UAAzC,mBAAOsB,EAAP,KAAiBC,EAAjB,KACA,EAAsCN,mBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAAwCR,mBAAS,GAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAAwBV,mBAAS,QAAjC,mBAAOW,EAAP,KAAaC,EAAb,KAEA,EAA0CZ,mBAAS,IAAnD,mBAAOa,EAAP,KAAsBC,EAAtB,KACA,EAA2Cd,oBAAS,GAApD,mBAAOe,EAAP,KAAsBC,EAAtB,KACA,EAA8BhB,mBAASH,EAAed,GAAf,SAAvC,mBAAOkC,EAAP,KAAgBC,EAAhB,KACA,EAAsClB,oBAAS,GAA/C,mBAAOmB,EAAP,KAAoBC,EAApB,KAmDMC,EAAkB,WACpBL,GAAkBD,IAuBtB,MAAO,CACHd,gBAAeC,mBACfC,YAAWC,eACXC,WAAUC,cACVC,cAAaC,iBACbC,eAAcC,kBACdC,OAAMC,UACNC,gBAAeC,mBACfC,gBAAeM,iBACfJ,UAASC,aACTC,cAAaG,WA7BE,WACfF,GAAgBD,IA6BhBI,OAzBW,WACX,OAAIpB,GAAcE,EACNU,GAAiBE,GAAWZ,GAAYI,IAAiBF,EAEzDQ,GAAiBE,GAAWZ,GAAYI,IAAiBF,GAqB7DiB,WA3DO,WACf,OAAOC,aAAY,YAnBA,WACnB,OAAOxB,GACH,KAAKP,EACDwB,GAAW,SAACD,GAAD,OAAaA,EAAU,KAClC,MACJ,KAAKtB,EACDuB,GAAW,SAACD,GAAD,OAAaA,EAAU,MAclCS,KACD,MAwDaC,WApDL,SAACC,GAChBC,cAAcD,IAmDkBE,WA/CjB,WACfZ,EAAWf,IA8CiC4B,cA3C1B,SAACH,GACnBC,cAAcD,GACdP,IACAH,EAAWb,IAwCgD2B,UAjB7C,WACd,OAAIf,IAAYd,EAAkB,wBAC9Bc,IAAYZ,EAAkB,sBAC7BU,GAAiBE,IAAYd,OAAlC,EAAoD,0BAepD8B,gBApFoB,SAAClD,GACrBqB,EAAaP,EAAed,GAAf,WACbmC,EAAWf,M,6BChBN+B,EAAaC,IAAMC,cAAc,IAY/BC,EATY,SAAC,GAAuC,IAAD,IAApCtD,aAAoC,MAA5BW,EAA4B,EAAf4C,EAAe,EAAfA,SAC/C,EAA0CvC,EAAShB,GAAvBwD,GAA5B,EAAQN,gBAAR,kBAEA,OAAO,cAACC,EAAWM,SAAZ,CACCC,MAAK,eAAOF,GADb,SAEED,K,eCCEI,G,MAVG,SAAC,GAAgB,IACzBJ,EADwB,oBACxBA,SACR,OAAO,qBAAKK,UAAU,YAAf,SAA4BL,M,eCF/BM,EAAUC,IAAOC,IAAV,oOAaPC,EAAUF,IAAOC,IAAV,6XAgBPE,EAAQH,IAAOC,IAAV,8FAMLG,EAAkBJ,IAAOC,IAAV,+CAIfI,EAAgBL,IAAOM,MAAV,0BAmCJC,EAjCW,SAAC,GAAkC,IAAjCpE,EAAgC,EAAhCA,MAAOqE,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SAC5C,OACE,eAACV,EAAD,WACM,cAACI,EAAD,UAAQhE,IACR,cAACiE,EAAD,UAAkBI,IAClB,cAACN,EAAD,UACE,cAAC,EAAD,UACE,kCACA,+BACE,sCACA,6CACA,sCACA,iDAJO,GAMRO,EAASC,KAAI,SAACC,EAAKC,GAClB,OACE,+BACE,6BAAKD,EAAIE,OACT,6BAAKF,EAAIG,cACT,6BAAKH,EAAII,OACT,6BACE,+BAAOJ,EAAIK,mBALNJ,iBCjBZK,G,MArCC,WACZ,MAA+EC,qBAAW7B,GAAlFjB,EAAR,EAAQA,QAASF,EAAjB,EAAiBA,cAAgBF,EAAjC,EAAiCA,cAAeC,EAAhD,EAAgDA,iBAAkBkB,EAAlE,EAAkEA,UAMlE,OAJAgC,qBAAU,WACNlD,EAAiBkB,OAClB,CAAClB,EAAkBkB,IAKlB,cADA,CACA,OAAKW,UAAU,mBAAf,UACI,sBAAKA,UAAU,SAAf,UACM9B,GAAiB,mBAAG8B,UAAU,SAAb,SAAwB9B,IAC3C,mBAAG8B,UAAU,iBAAb,SAAgCsB,EAAiBhD,UAK/CF,GACE,qCACI,qBAAK4B,UAAU,4BACf,qBAAKA,UAAU,oC,2GCqBxBuB,EA5CC,SAAC,GAAgB,IAAZC,EAAW,oBAExBC,EAOuBD,EAPvBC,GADJ,EAQ2BD,EANvB1B,aAFJ,MAEY,GAFZ,IAQ2B0B,EALvBE,oBAHJ,WAQ2BF,EAJvBG,gBAJJ,MAIe,GAJf,IAQ2BH,EAHvBI,mBALJ,MAKkB,cALlB,IAQ2BJ,EAFvBK,mBANJ,SAOIlC,EACuB6B,EADvB7B,SACGmC,EARP,YAQ2BN,EAR3B,GAUMO,EAAc,CAAC,CACjB,SAAYL,EACZ,KAAQA,IAGNM,EAAiB,CAAC,CACpB,KAAQH,EACR,MAASA,IAGb,OAGI,cADA,CACA,+BAAKJ,GAAIA,EAAI3B,MAAOA,EAAOE,UAAWA,IAAU+B,EAAaH,IAAmBE,GAAhF,cACMJ,GACE,0BAAU5B,MAAOA,EAAOmC,MAAOjC,IAAUgC,GAAiBE,KAAMP,KAElED,GAAgB/B,O,kCCEfwC,EA9BD,SAAC,GAAgB,IAAD,EAAXX,EAAW,oBAElBY,EAA2CZ,EAA3CY,MAAOC,EAAoCb,EAApCa,YAAgBC,EAA/B,YAAmDd,EAAnD,GACA,EAA0BnE,mBAAQ,UAACmE,EAAM1B,aAAP,QAAgB,IAAlD,mBAAOA,EAAP,KAAcyC,EAAd,KAOA,OACI,mCACCH,GACG,qCACI,uBAAOpC,UAAU,iBAAjB,SAAoCoC,IACpC,iDAAYE,GAAZ,IAA6BxC,MAAOA,EAAOuC,YAAaA,EAAaG,SAV5D,SAACC,GAClBF,EAASE,EAAEC,OAAO5C,OACd0B,EAAMgB,UAAUhB,EAAMgB,SAASC,aCqC5BE,G,MA1CF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEZ,EAA2CxB,qBAAW7B,GAA/CjC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,iBAGhBsF,EAAeD,EAASE,SAASxF,GAAgBA,EAAgBsF,EAAS,GAE1EG,EAAgB,SAACN,GACnB,IAAM3C,EAAQ2C,EAAEC,OAAO5C,OAAS+C,EAChCtF,EAAiBuC,IAGrB,OACI,qBAAKE,UAAU,UAAf,SACI,sBAAKA,UAAU,cAAf,UACM4C,EAASI,QAAU,GAAKJ,EAAShC,KAAI,SAACqC,EAASnC,GAAV,OACnC,eAAC,WAAD,WACI,uBAAQG,KAAK,QACLiB,KAAM,SAAWpB,EAAQ,GACzBhB,MAAOmD,EACPxB,GAAI,QAAUX,EAAQ,GACtBoC,QAASL,IAAgBI,EACzBT,SAAUO,IAElB,uBAAOI,QAAS,QAAUrC,EAAQ,GAC1Bd,UAAW,gBAAkBc,EAAM,GAD3C,SAEI,4BAAImC,QAVGnC,MAcnB,qBAAKd,UAAU,6B,QCbhBoD,G,MAnBD,SAAC,GAAgB,IAAZ5B,EAAW,oBAC1B,EAAoCA,EAA5B6B,YAAR,MAAc,QAAd,EAAuB1D,EAAa6B,EAAb7B,SAEjB2D,EAAY,CAAC,oCACAD,KAASA,IAG5B,OACI,qBAAKrD,UAAWA,IAAUsD,GAA1B,SACM3D,MCQC4D,G,MAlBA,SAAC,GAAgB,IAAZ/B,EAAW,oBAC7B,EAA+BA,EAAvBC,UAAR,MAAa,GAAb,EAAiB9B,EAAc6B,EAAd7B,SAEjB,OACE,qBAAKK,UAAU,QAAf,SACI,qBAAKA,UAAU,cAAcyB,GAAIA,EAAjC,SACK9B,QCwHE6D,EAxHD,SAAC,GAAkB,IAAhB5D,EAAe,EAAfA,SAEf,EAAiFwB,qBAAW7B,GAApFkE,EAAR,EAAQA,eAAgBrF,EAAxB,EAAwBA,cAAeM,EAAvC,EAAuCA,eAAgBC,EAAvD,EAAuDA,WAAYQ,EAAnE,EAAmEA,WAG7DuE,EAAc,SAACjB,GACnB/D,KAIIiF,EAAW,WACbhF,IACA,IAAMiF,EAAOC,SAASC,cAAc,gBAChCF,GAAMA,EAAKG,UAAUC,OAAO,eAmBpC,OACE,qCACE,eAAC,EAAD,CAAMX,KAAK,QAAX,UACE,cAAC,EAAD,IAEA,sBAAKrD,UAAU,UAAf,UACK5B,GACK,cAAC,EAAD,CACIqD,GAAK,YACL3B,MAAM,QACN8B,YAAY,UACZF,cAAc,EACduC,QAASP,EACT/B,SAAS,WAGjBvD,GACI,cAAC,EAAD,CACIqD,GAAK,YACL3B,MAAM,QACN8B,YAAY,UACZF,cAAc,EACduC,QAASP,EACT/B,SAAS,SAKnB,cAAC,EAAD,CACEF,GAAK,YACL3B,MAAM,QACN8B,YAAc,UACdF,cAAgB,EAChBuC,QAtCE,WACZ9E,KAsCUwC,SAAS,oBAGV/B,GAAY,cAAC,EAAD,CACX6B,GAAK,eACL3B,MAAM,WACN8B,YAAc,YACdF,cAAgB,EAChBuC,QAASN,EACThC,SAAS,mBAIjB,eAAC,EAAD,CAAM0B,KAAK,OAAX,UACM,0CACCzD,GACC,qBAAKI,UAAU,gBAAf,SACKJ,EAASgB,KAAI,SAACsD,EAASpD,GAAV,OACV,cAAC,EAAD,CACOsB,MAAO8B,EAAQ9B,MACdC,YAAa6B,EAAQ7B,YACrBvC,MAAOoE,EAAQpE,MACf2B,GAAIyC,EAAQzC,IAJRX,QAStB,sBAAKd,UAAU,UAAf,UACE,cAAC,EAAD,CACIyB,GAAK,WACL3B,MAAM,OACN4B,cAAgB,EAChBuC,QAASN,EACThC,SAAS,uBAEb,cAAC,EAAD,CAAQsC,QApFE,SAACxB,GAAO,IAAD,IAC3BgB,GAAe,UAAAI,SAASC,cAAc,qBAAvB,eAAsChE,SAAtC,UACZ+D,SAASC,cAAc,gBADX,aACZ,EAAiChE,QACjC,MAEH6D,KA+EU,4BCnGRtD,EAAQH,IAAOC,IAAV,gDAILjD,EAAiB,CAAC,CAACuE,GAAG,YAAa3B,MAAO,aA4SjCS,EA1SO,WAGpB,IAAM4D,EAAO,WACX,IAAMP,EAAOC,SAASC,cAAc,aAChCF,GAAMA,EAAKG,UAAUC,OAAO,eAGlC,OACE,qCACE,cAAC,EAAD,4BAGA,cAAC,EAAD,CACE3H,MAAM,gBACNqE,UAAW,cAAC,EAAD,UAAO,cAAC,EAAD,CAAOd,SAAU1C,MACnCyD,SAAU,CACR,CACEI,KAAM,WACNC,YAAa,2DACbC,KAAM,8FACNC,aAAc,yBAEhB,CACEH,KAAM,gBACNC,YAAa,kDACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,YACNC,YAAa,8BACbC,KAAM,SACNC,aAAc,+BAEhB,CACEH,KAAM,WACNC,YAAa,qDACbC,KAAM,WACNC,aAAc,8BAMpB,cAAC,EAAD,CACE7E,MAAM,oBACNqE,UAAW,cAAC,EAAD,CAAS0D,WAAW,EAAMC,OAAO,cAAcvE,MAAM,aAChEa,SAAU,CACR,CACEI,KAAM,YACNC,YAAa,gCACbC,KAAM,OACNC,aAAc,4BAEhB,CACEH,KAAM,SACNC,YAAa,kDACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,QACNC,YAAa,wBACbC,KAAM,SACNC,aAAc,kCAKpB,cAAC,EAAD,CACE7E,MAAM,UACNqE,UAAW,cAAC,EAAD,CAAQuD,QAAS,kBAAMK,QAAQC,IAAI,SAAnC,yBACX5D,SAAU,CACR,CACEI,KAAM,KACNC,YAAa,4BACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,QACNC,YAAa,yDACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,eACNC,YAAa,yBACbC,KAAM,UACNC,aAAc,4BAEhB,CACEH,KAAM,WACNC,YAAa,mFACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,cACNC,YAAa,+FACbC,KAAM,OACNC,aAAc,2BAEhB,CACEH,KAAM,cACNC,YAAa,0CACbC,KAAO,SACPC,aAAe,+GAEjB,CACEH,KAAM,UACNC,YAAa,yCACbC,KAAO,WACPC,aAAe,8BAKrB,cAAC,EAAD,CACE7E,MAAM,mCACNqE,UAAW,cAAC,EAAD,CACTe,GAAK,eACL3B,MAAM,WACN8B,YAAc,YACdF,cAAgB,EAChBuC,QAAS,kBAAIK,QAAQC,IAAI,gBACzB5C,SAAS,aAEXhB,SAAU,CACR,CACEI,KAAM,KACNC,YAAa,4BACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,QACNC,YAAa,yDACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,eACNC,YAAa,yBACbC,KAAM,UACNC,aAAc,4BAEhB,CACEH,KAAM,WACNC,YAAa,mFACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,cACNC,YAAa,+FACbC,KAAM,OACNC,aAAc,2BAEhB,CACEH,KAAM,cACNC,YAAa,0CACbC,KAAO,SACPC,aAAe,+GAEjB,CACEH,KAAM,UACNC,YAAa,yCACbC,KAAO,WACPC,aAAe,8BAKrB,cAAC,EAAD,CACE7E,MAAM,SACNqE,UAAW,cAAC,EAAD,CAAO0B,MAAM,eACxBzB,SAAU,CACR,CACEI,KAAM,QACNC,YAAa,2BACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,QACNC,YAAa,oCACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,cACNC,YAAa,yBACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,WACNC,YAAa,8CACbC,KAAO,WACPC,aAAe,8BAOrB,cAAC,EAAD,CACE7E,MAAM,QACNqE,UAAW,cAAC,EAAD,CAAMkC,SAAU,CAAC,QAAS,QAAS,QAAS,WACvDjC,SAAU,CACR,CACEI,KAAM,WACNC,YAAa,wEACbC,KAAM,mBACNC,aAAc,yBAEhB,CACEH,KAAM,WACNC,YAAa,+CACbC,KAAM,WACNC,aAAc,8BAKpB,cAAC,EAAD,CACE7E,MAAM,QACNqE,UACE,eAAC,EAAD,CAAOe,GAAG,WAAV,UACE,eAAC,EAAD,CAAM4B,KAAK,QAAX,uBAEE,cAAC,EAAD,CAAQY,QAASE,EAAjB,qBAEF,eAAC,EAAD,CAAMd,KAAK,OAAX,sBAEE,cAAC,EAAD,CAAQY,QAASE,EAAjB,8BAGNxD,SAAU,CACR,CACEI,KAAM,OACNC,YAAY,iIAEZC,KAAM,SACNC,aAAc,kEAEhB,CACEH,KAAM,iBACNC,YAAY,yQAIZC,KAAM,OACNC,aAAc,8BAKpB,cAAC,EAAD,CACE7E,MAAM,SACNqE,UAAW,cAAC,EAAD,gCACXC,SAAU,CACR,CACEI,KAAM,KACNC,YAAa,8DACbC,KAAM,SACNC,aAAc,2BAEhB,CACEH,KAAM,iBACNC,YAAa,yCACbC,KAAM,OACNC,aAAc,8BAKpB,cAAC,EAAD,CACE7E,MAAM,aACNqE,UAAU,0BACVC,SAAU,CACR,CACEI,KAAM,iBACNC,YAAa,yCACbC,KAAM,OACNC,aAAc,kCC3SpBsD,GAAgB,CACpB,CAAC/C,GAAI,YAAaW,MAAO,aAActC,MAAO,WAAYuC,YAAa,gCACvE,CAACZ,GAAI,WAAYW,MAAO,YAAatC,MAAO,WAAYuC,YAAa,gCA2BxDoC,GAxBG,WAEhB,MAAoFrD,qBAAW7B,GAAxFnB,EAAP,EAAOA,cAAeQ,EAAtB,EAAsBA,OAAQO,EAA9B,EAA8BA,WAAYN,EAA1C,EAA0CA,WAAYG,EAAtD,EAAsDA,WAAYI,EAAlE,EAAkEA,cAC5DsF,EAAeC,mBAiBrB,OAfAtD,qBAAU,WASR,OARIjD,IAAkBQ,IACpB8F,EAAaE,QAAU/F,IACdD,IACTQ,IAEQR,KACRI,EAAW0F,EAAaE,SAEnB,WACL5F,EAAW0F,EAAaE,YAEzB,CAACxG,EAAee,EAAYN,EAAYD,EAAQI,EAAYI,IAGxD,cAAC,EAAD,CAAOQ,SAAU4E,MC1BpBA,GAAgB,CACpB,CAAC/C,GAAI,YAAaW,MAAO,aAAcC,YAAa,gCACpD,CAACZ,GAAI,WAAYW,MAAO,YAAaC,YAAa,gCA2BrCwC,GAxBG,WAEhB,MAAoFzD,qBAAW7B,GAAxFnB,EAAP,EAAOA,cAAeQ,EAAtB,EAAsBA,OAAQO,EAA9B,EAA8BA,WAAYN,EAA1C,EAA0CA,WAAYG,EAAtD,EAAsDA,WAAYI,EAAlE,EAAkEA,cAC5DsF,EAAeC,mBAiBrB,OAfAtD,qBAAU,WASR,OARIjD,IAAkBQ,IACpB8F,EAAaE,QAAU/F,IACdD,IACTQ,IAEQR,KACRI,EAAW0F,EAAaE,SAEnB,WACL5F,EAAW0F,EAAaE,YAEzB,CAACxG,EAAee,EAAYN,EAAYD,EAAQI,EAAYI,IAGxD,cAAC,EAAD,CAAOQ,SAAU4E,MCzBpBA,GAAgB,CACpB,CAAC/C,GAAI,YAAaW,MAAO,aAActC,MAAO,WAAYuC,YAAa,gCACvE,CAACZ,GAAI,WAAYW,MAAO,YAAatC,MAAM,WAAYuC,YAAa,+BACpE,CAACZ,GAAG,SAAUW,MAAO,SAAUtC,MAAM,IAAKuC,YAAa,iCA0B1CyC,GAvBJ,WAET,MAAoF1D,qBAAW7B,GAAxFnB,EAAP,EAAOA,cAAeQ,EAAtB,EAAsBA,OAAQO,EAA9B,EAA8BA,WAAYN,EAA1C,EAA0CA,WAAYG,EAAtD,EAAsDA,WAAYI,EAAlE,EAAkEA,cAC5DsF,EAAeC,mBAiBrB,OAfAtD,qBAAU,WASR,OARIjD,IAAkBQ,IACpB8F,EAAaE,QAAU/F,IACdD,IACTQ,IAEQR,KACRI,EAAW0F,EAAaE,SAEnB,WACL5F,EAAW0F,EAAaE,YAEzB,CAACxG,EAAee,EAAYN,EAAYD,EAAQI,EAAYI,IAGxD,cAAC,EAAD,CAAOQ,SAAU4E,MC1BpBA,GAAgB,CACpB,CAAC/C,GAAG,YAAaW,MAAO,YAAatC,MAAO,WAAYuC,YAAa,gCACrE,CAACZ,GAAG,OAAQW,MAAO,YAAatC,MAAM,WAAYuC,YAAa,qCAC/D,CAACZ,GAAG,SAAUW,MAAO,SAAUtC,MAAM,IAAKuC,YAAa,iCA2B1C0C,GAxBA,WAEb,MAAoF3D,qBAAW7B,GAAxFnB,EAAP,EAAOA,cAAeQ,EAAtB,EAAsBA,OAAQO,EAA9B,EAA8BA,WAAYN,EAA1C,EAA0CA,WAAYG,EAAtD,EAAsDA,WAAYI,EAAlE,EAAkEA,cAC5DsF,EAAeC,mBAiBrB,OAfAtD,qBAAU,WASR,OARIjD,IAAkBQ,IACpB8F,EAAaE,QAAU/F,IACdD,IACTQ,IAEQR,KACRI,EAAW0F,EAAaE,SAEnB,WACL5F,EAAW0F,EAAaE,YAEzB,CAACxG,EAAee,EAAYN,EAAYD,EAAQI,EAAYI,IAGxD,cAAC,EAAD,CAAOQ,SAAU4E,MCaXQ,GA/BI,WAEjB,IjBT6B9I,EAAK+I,EiBSlC,EAA0C5H,mBAASN,GAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KAEMJ,EAAS,CACb,CAAEd,MAAOU,EAAaT,EAAG,cAAC4I,GAAD,KACzB,CAAE7I,MAAOW,EAAaV,EAAG,cAAC,GAAD,KACzB,CAAED,MjBoBc,KiBpBDC,EAAG,cAAC,GAAD,KAClB,CAAED,MAAOY,EAAUX,EAAG,cAAC,GAAD,MAQxB,OACE,eAAC,EAAD,CAAaF,MAAOkB,EAApB,UACE,cAAC,EAAD,CAAMsF,UjBzBmB1G,EiByBYiB,EjBzBP8H,EiByBe,QjBxBxC/I,EAAI0E,KAAI,SAACuE,GACZ,OAAOA,EAAKF,OiBwBRzC,SAPY,SAAC4C,GACrB7H,EAAiB6H,MAOf,cAAC,EAAD,CAAO3D,GAAG,cAAV,SACGH,EAAehE,EAAeH,SCKxBkI,GA9BH,WACV,OACI,eAAC,IAAD,WACE,qBAAKrF,UAAU,aAAf,SACI,+BACE,6BACE,cAAC,IAAD,CAAMsF,GAAG,IAAT,qBADO,GAGT,6BACE,cAAC,IAAD,CAAMA,GAAG,QAAT,4BADO,QAKb,uBACA,cAAC,EAAD,UACE,cAAC,EAAD,UACE,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,QAAZ,SACE,cAACC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,IAAZ,SACE,cAAC,GAAD,iBCxBpBE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEF9B,SAAS+B,eAAe,W","file":"static/js/main.3459148c.chunk.js","sourcesContent":["// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\nimport timers from '../utils/timers.json';\n\nexport const readCollection = (arr, keyName) => {\n    return arr.map((item) => {\n        return item[keyName];\n    });\n}\n\nexport const getTimer = (timerName, arr) =>  {\n    function isTimer(timer) {\n        return timer.title === timerName;\n    }\n    return arr.find((isTimer)).C;\n}\n\nconst isMatch = (setting, value) => {\n    return setting.id === value; \n}\n\nexport const getSetting = (value, settings) => {\n    const match = settings.find((setting) => isMatch(setting, value));\n    return match.value;\n}\n\nexport const formatTime = (timer) => {\n    const seconds = `0${(timer % 60)}`.slice(-2)\n    const fetchedMinutes = `${Math.floor(timer / 60)}`\n    const minutes = `0${fetchedMinutes % 60}`.slice(-2)\n    const hours = `0${Math.floor(timer / 3600)}`.slice(-2)\n  \n    return `${hours}:${minutes}:${seconds}`\n}\n\nexport const T_STOPWATCH = \"Stopwatch\";\nexport const T_COUNTDOWN = \"Countdown\";\nexport const T_TABATA = \"Tabata\";\nexport const T_XY = \"XY\";\n\nexport const TIMER_SETTINGS = timers;\n","import { useState } from 'react';\nimport { TIMER_SETTINGS, T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA } from '../utils/helpers';\n\nexport const useTimer = (timer) => {\n\n    const [selectedTimer, setSelectedTimer] = useState(timer);\n    const [startTime, setStartTime] = useState(TIMER_SETTINGS[timer]['startTime']);\n    const [stopTime, setStopTime] = useState(TIMER_SETTINGS[timer]['stopTime']);\n    const [totalRounds, setTotalRounds] = useState(1);\n    const [currentRound, setCurrentRound] = useState(1);\n    const [mode, setMode] = useState(\"work\");\n\n    const [statusMessage, setStatusMessage] = useState(\"\");\n    const [timerCounting, setTimerCounting] =  useState(false);\n    const [counter, setCounter] = useState(TIMER_SETTINGS[timer]['counter']);\n    const [isFrontSide, setIsFrontSide] = useState(true);\n\n\n    const initializeTimer = (timer) => { \n        setStartTime(TIMER_SETTINGS[timer]['startTime']);\n        setCounter(startTime);\n    }\n\n    // private function: start the counter\n    const startCounting =  () => {\n        switch(selectedTimer) {\n            case T_STOPWATCH:\n                setCounter((counter) => counter + 1);\n                break;\n            case T_COUNTDOWN:\n                setCounter((counter) => counter - 1);\n                break;\n            case T_XY:\n                break;\n            case T_TABATA:\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Start the timer\n    const startTimer = () => {\n        return setInterval(() => {\n                startCounting();\n            }, 1000);\n    }\n\n    // Pause the timer\n    const pauseTimer = (interval) => {\n        clearInterval(interval);\n    }\n\n    // Reset the timer\n    const resetTimer = () => {\n        setCounter(startTime);\n    }\n\n    const completeTimer = (interval) => {\n        clearInterval(interval);\n        toggleCounting();\n        setCounter(stopTime);\n    }\n\n\n    // toggle timer on, off\n    const toggleCounting  = () => {\n        setTimerCounting(!timerCounting);\n    }\n\n    // toggle between timer and settings card\n    const toggleSide = () => {\n        setIsFrontSide(!isFrontSide);\n    }\n\n    // check if the timer completed\n    const isOver = () =>  {\n        if (startTime  <= stopTime)\n            return  timerCounting && counter >= stopTime && currentRound === totalRounds;\n        else\n            return  timerCounting && counter <= stopTime && currentRound === totalRounds;\n    }\n\n    // conversation handler\n    const messenger = () => {\n        if (counter === startTime) return \"Let's move that body!\";\n        if (counter === stopTime)  return \"You made it! Again?\";\n        if (!timerCounting && counter !== startTime) return \"Let's take a breath...\";\n    }\n\n    return {\n        selectedTimer, setSelectedTimer,\n        startTime, setStartTime,\n        stopTime, setStopTime,\n        totalRounds, setTotalRounds,\n        currentRound, setCurrentRound,\n        mode, setMode,\n        statusMessage, setStatusMessage, \n        timerCounting, toggleCounting,\n        counter, setCounter,\n        isFrontSide, toggleSide,\n        isOver, startTimer, pauseTimer, resetTimer, completeTimer, messenger,\n        initializeTimer\n    }\n}","import React from 'react';\nimport { useTimer } from '../hooks/useTimer';\nimport { T_STOPWATCH } from '../utils/helpers';\n\nexport const AppContext = React.createContext({});\n\n\nexport const AppProvider = ({ timer = T_STOPWATCH, children }) => {\n    const { initializeTimer, ...settings }  = useTimer(timer);\n\n    return <AppContext.Provider \n            value={{ ...settings}}>\n            {children}\n        </AppContext.Provider>;\n};\n\nexport default AppProvider;","import PropTypes from 'prop-types';\nimport './Container.css';\n\nconst Container = ({...props}) => {\n  const { children }  = props;\n  return <div className=\"container\">{children}</div>;\n}\n\n\nContainer.propTypes  = {\n  children: PropTypes.node\n}\n\nexport default Container;","import styled from \"styled-components\";\n\n\nconst Section = styled.div`\n  width: 90%;\n  margin: 2rem;\n  min-width: 35rem;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  margin-bottom: 10rem;\n\n`;\n\nconst Article = styled.div`\n  width: 100%;\n  height: 100%;\n  border-radius: 3rem;\n  box-shadow: 0.8rem 0.8rem 1.4rem var(--bgLight-2), -0.2rem -0.2rem 1.8rem var(--tint);\n  transition: transform 1s;\n  transform-style: preserve-3d;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  padding: 2rem;\n`;\n\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 2rem;\n`;\n\nconst RenderComponent = styled.div`\n  margin: 4rem 0;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = ({title, component, propDocs}) => {\n  return (\n    <Section>\n          <Title>{title}</Title>\n          <RenderComponent>{component}</RenderComponent>\n          <Article>\n            <Documentation>\n              <tbody>\n              <tr key={1}>\n                <th>Prop</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Default value</th>\n              </tr>\n              {propDocs.map((doc, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{doc.prop}</td>\n                    <td>{doc.description}</td>\n                    <td>{doc.type}</td>\n                    <td>\n                      <code>{doc.defaultValue}</code>\n                    </td>\n                  </tr>\n                );\n              })}\n              </tbody>\n            </Documentation>\n          </Article>\n    </Section>\n  );\n}\n\nexport default DocumentComponent;\n","import  { useContext, useEffect } from 'react';\nimport './Display.css';\nimport PropTypes from 'prop-types';\nimport {  AppContext } from '../../../platform/AppProvider';\nimport * as utils from \"../../../utils/helpers\";\n\nconst Display = () => {\n    const { counter, timerCounting,  statusMessage, setStatusMessage, messenger} = useContext(AppContext);\n\n    useEffect(() => {\n        setStatusMessage(messenger());\n    }, [setStatusMessage, messenger]);\n\t\t\n    return (\n\n        // Return is stylized circular display\n        <div className=\"display_circular\">\n            <div className=\"marker\">\n                { statusMessage && <p className=\"header\">{ statusMessage }</p>}\n                <p className=\"value neonText\">{ utils.formatTime(counter) }</p>\n            </div>\n        \n            { \n                // Animate if timer is on\n                !!timerCounting && \n                    <>\n                        <div className=\"display_circular_back-1\"></div>\n                        <div className=\"display_circular_back-2\"></div>\n                    </>\n            }\n        </div>\n\n    );\n}\n\n\nDisplay.propTypes = {\n\tisStarted: PropTypes.bool,\n    value: PropTypes.string,\n    status: PropTypes.string\n}\n\n\nexport default Display;\n","import './Button.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Button =  ({...props}) => {\n    const { \n        id,\n        value = \"\",\n        isIconButton = false, \n        iconName = \"\", \n        classifiers = \"btn_primary\", \n        iconVisible = true,\n        children, \n        ...buttonAttributes} = props; \n\n    const buttonStyle = [{\n        \"icon_btn\": isIconButton,\n        \"btn\": !isIconButton\n    }];\n\n    const iconVisibility = [{\n        \"show\": iconVisible,\n        \"hide\": !iconVisible\n    }];\n\n    return (   \n\n        // Returns a stylized text or icon button\n        <div id={id} value={value} className={className(buttonStyle, classifiers)} { ...buttonAttributes} >\n            { isIconButton && \n                <ion-icon value={value} class={className(iconVisibility)} name={iconName}></ion-icon>\n            }\n            {!isIconButton && children}\n        </div>\n    );\n\n}\n\nButton.propTypes = {\n    id: PropTypes.string,\n    value: PropTypes.string,\n    isIconButton:  PropTypes.bool,\n    iconName: PropTypes.string,\n    classifiers: PropTypes.string,\n    iconVisible: PropTypes.bool,\n\tonClick: PropTypes.func.isRequired\n}\n\nexport default Button;\n","import { useState } from 'react';\nimport './Input.css';\nimport PropTypes from 'prop-types';\n\nconst Input = ({...props}) => {\n    \n    const { label, placeholder, ...inputAttributes } = props;\n    const [value, setValue] = useState(props.value ?? \"\")\n\n    const handleChange = (e) => {\n        setValue(e.target.value);\n        if (props.onChange) props.onChange(e);\n    }\n\n    return (\n        <>\n        {label && \n            <fieldset>\n                <label className=\"settings-label\" >{label}</label>\n                <input  {...inputAttributes} value={value} placeholder={placeholder} onChange={handleChange} />\n            </fieldset>\n        }\n        </>\n    );\n\n}\n\nInput.propTypes = {\n    label: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func\n}\n\nexport default Input;","import { useContext } from 'react';\nimport { AppContext } from '../../../platform/AppProvider';\nimport { Fragment } from 'react';\nimport './Tabs.css';\nimport PropTypes from 'prop-types';\n\nconst Tabs = ({ tabItems }) => {\n\n    const {selectedTimer, setSelectedTimer } = useContext(AppContext);\n    \n    // select tab if included in tab list provided, otherwise select first item in tab list\n    const tabSelected  = tabItems.includes(selectedTimer)? selectedTimer : tabItems[0];\n    \n    const handleChange =  (e) => {\n        const value = e.target.value || tabSelected;\n        setSelectedTimer(value);\n    }\n\n    return  (\n        <div className=\"btn_bar\">\n            <div className=\"tab_control\">\n                { tabItems.length <= 4 && tabItems.map((tabItem, index) =>\n                    <Fragment key={index}>\n                        <input  type=\"radio\" \n                                name={\"radio\" + (index + 1)} \n                                value={tabItem} \n                                id={\"tab-\" + (index + 1)} \n                                checked={tabSelected === tabItem} \n                                onChange={handleChange}\n                        />\n                        <label htmlFor={\"tab-\" + (index + 1)} \n                                className={\"tab_control_\" + (index+1)}>\n                            <p>{tabItem}</p>\n                        </label>\n                    </Fragment>\n                )}\n                <div className=\"tab_control_color\"></div>\n            </div>\n        </div>\n    );\n}\n\n\nTabs.propTypes = {\n    tabItems: PropTypes.arrayOf(PropTypes.string),\n    onChange: PropTypes.func\n}\n\nexport default Tabs;","import './Card.css';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Card =  ({...props}) => {\n    const { side =\"front\", children } = props;\n\n    const cardStyle = [{\n        [`panel_face_${side}`]: side? true : false\n    }];\n\n    return (\n        <div className={className(cardStyle)}>\n            { children }\n        </div>\n    );\n}\n\nCard.propTypes = {\n    side: PropTypes.string,\n    children: PropTypes.node\n}\n\nexport default Card;","import './Panel.css';\nimport PropTypes from 'prop-types';\n\nconst Panel =  ({...props}) => {\n  const { id = \"\", children }  = props;\n\n  return (\n    <div className=\"panel\">\n        <div className=\"panel_inner\" id={id}>\n            {children}\n        </div>\n    </div>\n  );\n}\n\n\nPanel.propTypes  = {\n  id: PropTypes.string,\n  children: PropTypes.node\n}\n\nexport default Panel;","import { useContext } from 'react';\nimport {  AppContext } from '../../platform/AppProvider';\nimport PropTypes from 'prop-types';\nimport Card from \"./Card/Card\";\nimport Display from \"./Display/Display\";\nimport Input from \"./Input/Input\";\nimport Button  from \"./Button/Button\";\n// import * as utils from \"../../utils/helpers\";\n\nconst Timer = ({ settings }) => {\n\n  const { setDisplayTime, timerCounting, toggleCounting, toggleSide, resetTimer} = useContext(AppContext);\n\n  // Toggle the counter and hand-off to parent timer\n  const toggleCount = (e) => {\n    toggleCounting();\n  }\n\n  // Flips the card to display settings\n  const flipSide = () => {\n      toggleSide();\n      const card = document.querySelector(\"#timer_panel\");\n      if (card) card.classList.toggle('is-flipped');\n  }\n\n  // Save settings\n  const saveSettings  = (e) => {\n    setDisplayTime(document.querySelector(\"#startTime\")?.value \n    || document.querySelector(\"#rest\")?.value \n    || null);\n\n    flipSide();\n    \n  }\n\n  // Reset the counter\n  const reset = () => {\n    resetTimer();\n  }\n\n\n  return (\n    <>\n      <Card side=\"front\">\n        <Display  />\n\n        <div className=\"btn_bar\">\n            {timerCounting  &&\n                  <Button \n                      id = \"pause_btn\"\n                      value=\"pause\"\n                      classifiers=\"primary\" \n                      isIconButton={true} \n                      onClick={toggleCount} \n                      iconName=\"pause\"\n                  />\n            }\n            {!timerCounting && \n                  <Button \n                      id = \"start_btn\"\n                      value=\"start\"\n                      classifiers=\"primary\" \n                      isIconButton={true} \n                      onClick={toggleCount} \n                      iconName=\"play\"\n                  />\n            \n            }\n\n            <Button \n              id = \"reset_btn\"\n              value=\"reset\"\n              classifiers = \"primary\"\n              isIconButton = {true}\n              onClick={reset}\n              iconName=\"refresh-outline\"\n            />\n          \n            {settings && <Button \n              id = \"settings_btn\"\n              value=\"settings\"\n              classifiers = \"secondary\"\n              isIconButton = {true}\n              onClick={flipSide}\n              iconName=\"settings\"\n            />}\n        </div>\n      </Card>\n      <Card side=\"back\">\n            <h1>Settings</h1>\n            {settings && \n              <div className=\"settings-form\">\n                  {settings.map((setting, index) =>  \n                      <Input key={index} \n                             label={setting.label} \n                              placeholder={setting.placeholder} \n                              value={setting.value}\n                              id={setting.id}\n                      />)\n                  }\n              </div>\n              }\n            <div className=\"btn_bar\">\n              <Button \n                  id = \"back_btn\"\n                  value=\"back\"\n                  isIconButton = {true}\n                  onClick={flipSide}\n                  iconName=\"arrow-back-outline\"\n              />\n              <Button onClick={saveSettings}>\n                Save\n              </Button>\n            </div>\n      </Card>\n    </>\n  );\n\n\n  \n}\n\nTimer.propTypes = {\n  settings: PropTypes.array,\n  statusMessage: PropTypes.string,\n  displayTime: PropTypes.string,\n  onChange: PropTypes.func\n}\n\nexport default Timer;\n","import styled from \"styled-components\";\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\nimport Display from \"../components/generic/Display/Display\";\nimport Button from \"../components/generic/Button/Button\";\nimport Input from \"../components/generic/Input/Input\";\nimport Tabs from \"../components/generic/Tabs/Tabs\";\nimport Card from \"../components/generic/Card/Card\";\nimport Panel from \"../components/generic/Panel/Panel\";\nimport Timer from \"../components/generic/Timer\";\n\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\nconst TIMER_SETTINGS = [{id:\"startTime\", value: \"00:00:00\"}];\n\nconst Documentation = () => {\n\n\n  const flip = () => {\n    const card = document.querySelector(\"#testcard\");\n    if (card) card.classList.toggle('is-flipped');\n  }\n\n  return (\n    <>\n      <Title>Documentation</Title>\n\n\n      <DocumentComponent\n        title=\"Generic Timer\"\n        component={<Panel><Timer settings={TIMER_SETTINGS} /></Panel>}\n        propDocs={[\n          {\n            prop: \"settings\",\n            description: \"Collection that defines the allowed settings for a timer\",\n            type: \"array of objects - [{label: 'label1', value: 'value1', placeholder: 'placeholder1'}, {...}]\",\n            defaultValue: \"Optional. Default: []\",\n          },\n          {\n            prop: \"statusMessage\",\n            description: \"Status message that can be used for rounds/rest\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"startTime\",\n            description: \"Starting time for the timer\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: 00:00:00\",\n          },\n          {\n            prop: \"onChange\",\n            description: \"Event handler for capturing values input on change\",\n            type: \"function\",\n            defaultValue: \"Optional. Default: None\",\n          }\n\n        ]}\n      />   \n\n      <DocumentComponent\n        title=\"Circular Display \"\n        component={<Display isStarted={true} status=\"Status Text\" value=\"00:10:00\" />}\n        propDocs={[\n          {\n            prop: \"isStarted\",\n            description: \"Animates the circular display\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: false\",\n          },\n          {\n            prop: \"status\",\n            description: \"Status message that can be used for rounds/rest\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Value to be displayed\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: 00:00:00\",\n          }\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Button \"\n        component={<Button onClick={() => console.log(\"test\")}>Text Button</Button>}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the button\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Identifier for the action useful to identify the event\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"isIconButton\",\n            description: \"Creates an icon button\",\n            type: \"boolean\",\n            defaultValue: \"Optional. Default: false\"\n          },\n          {\n            prop: \"iconName\",\n            description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"iconVisible\",\n            description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: true\"\n          },\n          {\n            prop: \"classifiers\",\n            description: \"CSS classes to append additional styles\",\n            type:  \"string\",\n            defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n          },\n          {\n            prop: \"onClick\",\n            description: \"Event handler for clicking on a button\",\n            type:  \"function\",\n            defaultValue:  \"Required. Default: None\"\n          },\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Button (with Icon configuration)\"\n        component={<Button \n          id = \"settings_btn\"\n          value=\"settings\"\n          classifiers = \"secondary\"\n          isIconButton = {true}\n          onClick={()=>console.log(\"icon button\")}\n          iconName=\"settings\"\n        />}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the button\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Identifier for the action useful to identify the event\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"isIconButton\",\n            description: \"Creates an icon button\",\n            type: \"boolean\",\n            defaultValue: \"Optional. Default: false\"\n          },\n          {\n            prop: \"iconName\",\n            description: \"Name of the icon taken from ion icons. Applicable only when isIconButton is true\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\"\n          },\n          {\n            prop: \"iconVisible\",\n            description: \"Sets the visibility of the icon in an Icon Button. Applicable only when isIconButton is true\",\n            type: \"bool\",\n            defaultValue: \"Optional. Default: true\"\n          },\n          {\n            prop: \"classifiers\",\n            description: \"CSS classes to append additional styles\",\n            type:  \"string\",\n            defaultValue:  \"Optional. Default: 'btn_primary' for text buttons. Possible values for icon buttons: 'primary', 'secondary'\"\n          },\n          {\n            prop: \"onClick\",\n            description: \"Event handler for clicking on a button\",\n            type:  \"function\",\n            defaultValue:  \"Required. Default: None\"\n          },\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Input \"\n        component={<Input label=\"Test Label\" />}\n        propDocs={[\n          {\n            prop: \"label\",\n            description: \"Label of the input field\",\n            type: \"String\",\n            defaultValue: \"Required. Default: None\",\n          },\n          {\n            prop: \"value\",\n            description: \"Initial value passed to the input\",\n            type: \"String\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"placeholder\",\n            description: \"Input placeholder text\",\n            type: \"String\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"onChange\",\n            description: \"Event handler for capturing keyboard inputs\",\n            type:  \"function\",\n            defaultValue:  \"Optional. Default: None\"\n          }\n\n\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Tabs \"\n        component={<Tabs tabItems={[\"Tab 1\", \"Tab 2\", \"Tab 3\", \"Tab 4\"]} />}\n        propDocs={[\n          {\n            prop: \"tabItems\",\n            description: \"Array of tab labels. Max 4 tabs. If more, the control will not render\",\n            type: \"Array of strings\",\n            defaultValue: \"Optional. Default: []\",\n          },\n          {\n            prop: \"onChange\",\n            description: \"Event handler for capturing the selected tab\",\n            type: \"function\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />    \n\n      <DocumentComponent\n        title=\"Card \"\n        component={\n          <Panel id=\"testcard\">\n            <Card side=\"front\">\n              front side\n              <Button onClick={flip}>Flip</Button>\n            </Card>\n            <Card side=\"back\">\n              back side\n              <Button onClick={flip}>Flip Again</Button>\n            </Card>\n          </Panel>}\n        propDocs={[\n          {\n            prop: \"side\",\n            description: `Card container that flips using css. \n            Two Cards (front and back) need to be defined in order for flipping to work`,\n            type: \"string\",\n            defaultValue: \"Optional. Default: 'front'. Possible values: 'front' |  'back'\",\n          },\n          {\n            prop: \"Children Nodes\",\n            description: `Accepts any React and HTML valid nodes. \n            An event within a child element of the card could trigger the flipping.\n            The event handler should query the id of Panel container and apply toggle('is-flipped') to\n            the queried element`,\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      /> \n\n      <DocumentComponent\n        title=\"Panel \"\n        component={<Panel >Content goes here</Panel>}\n        propDocs={[\n          {\n            prop: \"id\",\n            description: \"Identifier for the panel that will allow flipping the cards\",\n            type: \"string\",\n            defaultValue: \"Optional. Default: None\",\n          },\n          {\n            prop: \"Children Nodes\",\n            description: \"Accepts any React and HTML valid nodes\",\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />\n\n      <DocumentComponent\n        title=\"Container \"\n        component=\"Generic Empty Container\"\n        propDocs={[\n          {\n            prop: \"Children Nodes\",\n            description: \"Accepts any React and HTML valid nodes\",\n            type: \"node\",\n            defaultValue: \"Optional. Default: None\",\n          }\n        ]}\n      />           \n\n\n    </>\n  );\n\n}\n\nexport default Documentation;\n","import { useContext, useEffect, useRef } from 'react';\nimport {  AppContext } from '../../platform/AppProvider';\nimport Timer from \"../generic/Timer\";\n// import * as utils from \"../../utils/helpers\";\n\nconst SETTINGS_FORM = [\n  {id: \"startTime\", label: \"Start Time\", value: \"00:00:00\", placeholder: \"Start the timer at this time\"},\n  {id: \"stopTime\", label: \"Stop Time\", value: \"00:30:00\", placeholder: \"Stop the timer at this time\"}\n];\n\nconst StopWatch = ()  =>  {\n\n  const {timerCounting, isOver, resetTimer, startTimer, pauseTimer, completeTimer } = useContext(AppContext);\n  const runningTimer = useRef();\n\n  useEffect(() => {\n    if (timerCounting && !isOver()) {\n      runningTimer.current = startTimer()\n    } else if (isOver()) {\n      completeTimer();\n    }\n    else if (!isOver()) {\n      pauseTimer(runningTimer.current);\n    }\n    return () => {\n      pauseTimer(runningTimer.current);\n    };\n  }, [timerCounting, resetTimer, startTimer, isOver, pauseTimer, completeTimer]);\n\n\n  return <Timer settings={SETTINGS_FORM} />\n\n}\n\nexport default StopWatch;\n","import { useContext, useEffect, useRef } from 'react';\nimport {  AppContext } from '../../platform/AppProvider';\nimport Timer from '../../components/generic/Timer';\n\nconst SETTINGS_FORM = [\n  {id: \"startTime\", label: \"Start Time\", placeholder: \"Start the timer at this time\"},\n  {id: \"stopTime\", label: \"Stop Time\", placeholder: \"Stop the timer at this time\"},\n];\n\nconst Countdown = () => {\n\n  const {timerCounting, isOver, resetTimer, startTimer, pauseTimer, completeTimer } = useContext(AppContext);\n  const runningTimer = useRef();\n\n  useEffect(() => {\n    if (timerCounting && !isOver()) {\n      runningTimer.current = startTimer()\n    } else if (isOver()) {\n      completeTimer();\n    }\n    else if (!isOver()) {\n      pauseTimer(runningTimer.current);\n    }\n    return () => {\n      pauseTimer(runningTimer.current);\n    };\n  }, [timerCounting, resetTimer, startTimer, isOver, pauseTimer, completeTimer]);\n\n\n  return <Timer settings={SETTINGS_FORM} />\n  \n}\n\nexport default Countdown;\n","import { useContext, useEffect, useRef} from 'react';\nimport {  AppContext } from '../../platform/AppProvider';\nimport Timer from \"../generic/Timer\";\n\nconst SETTINGS_FORM = [\n  {id: \"startTime\", label: \"Start Time\", value: \"00:20:10\", placeholder: \"Start the timer at this time\"},\n  {id: \"stopTime\", label: \"Stop Time\", value:\"00:00:00\", placeholder: \"Stop the timer at this time\"},\n  {id:\"rounds\", label: \"Rounds\", value:\"2\", placeholder: \"Stops after that many rounds\"}\n];\n\nconst XY = () => {\n\n  const {timerCounting, isOver, resetTimer, startTimer, pauseTimer, completeTimer } = useContext(AppContext);\n  const runningTimer = useRef();\n\n  useEffect(() => {\n    if (timerCounting && !isOver()) {\n      runningTimer.current = startTimer()\n    } else if (isOver()) {\n      completeTimer();\n    }\n    else if (!isOver()) {\n      pauseTimer(runningTimer.current);\n    }\n    return () => {\n      pauseTimer(runningTimer.current);\n    };\n  }, [timerCounting, resetTimer, startTimer, isOver, pauseTimer, completeTimer]);\n\n\n  return <Timer settings={SETTINGS_FORM} />\n}\n\nexport default XY;","import { useContext, useEffect, useRef } from 'react';\nimport {  AppContext } from '../../platform/AppProvider';\nimport Timer from \"../generic/Timer\";\n\nconst SETTINGS_FORM = [\n  {id:\"startTime\", label: \"Work Time\", value: \"00:45:00\", placeholder: \"Start the timer at this time\"},\n  {id:\"rest\", label: \"Rest Time\", value:\"00:10:00\", placeholder: \"Timer will rest for that duration\"},\n  {id:\"rounds\", label: \"Rounds\", value:\"2\", placeholder: \"Stops after that many rounds\"}\n];\n\nconst Tabata = ()  => {\n  \n  const {timerCounting, isOver, resetTimer, startTimer, pauseTimer, completeTimer } = useContext(AppContext);\n  const runningTimer = useRef();\n\n  useEffect(() => {\n    if (timerCounting && !isOver()) {\n      runningTimer.current = startTimer()\n    } else if (isOver()) {\n      completeTimer();\n    }\n    else if (!isOver()) {\n      pauseTimer(runningTimer.current);\n    }\n    return () => {\n      pauseTimer(runningTimer.current);\n    };\n  }, [timerCounting, resetTimer, startTimer, isOver, pauseTimer, completeTimer]);\n\n\n  return <Timer settings={SETTINGS_FORM} />\n  \n}\n\nexport default Tabata;","import { useState } from 'react';\nimport AppProvider from '../platform/AppProvider';\nimport Tabs  from \"../components/generic/Tabs/Tabs\";\nimport Panel from \"../components/generic/Panel/Panel\";\n\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\nimport * as utils from '../utils/helpers.js';\nimport { T_STOPWATCH, T_COUNTDOWN, T_XY, T_TABATA } from '../utils/helpers';\n\nconst TimersView = () => {\n\n  const [selectedTimer, setSelectedTimer] = useState(T_STOPWATCH);\n  \n  const timers = [\n    { title: T_STOPWATCH, C: <Stopwatch /> },\n    { title: T_COUNTDOWN, C: <Countdown /> },\n    { title: T_XY, C: <XY /> },\n    { title: T_TABATA, C: <Tabata /> },\n  ];\n\n\n  const handleChange =  (v) => {\n    setSelectedTimer(v);\n  }\n\n  return (\n    <AppProvider timer={selectedTimer}>\n      <Tabs tabItems={utils.readCollection(timers, 'title')} \n            onChange={handleChange} />\n      <Panel id=\"timer_panel\">\n        {utils.getTimer(selectedTimer, timers)}\n      </Panel>\n    </AppProvider>\n\n  );\n  \n\n}\n\n\nexport default TimersView;\n","import React from \"react\";\nimport AppProvider from './platform/AppProvider';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Container from \"./components/generic/Container/Container\";\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\n\n\nconst App = () => {\n  return (\n      <Router>\n        <nav className=\"navigation\">\n            <ul>\n              <li key={1}>\n                <Link to=\"/\">Timers</Link>\n              </li>\n              <li key={2}>\n                <Link to=\"/docs\">Documentation</Link>\n              </li>\n            </ul>\n          </nav>\n          <br />\n          <AppProvider>\n            <Container>\n              <Switch>\n                  <Route path=\"/docs\">\n                    <DocumentationView />\n                  </Route>\n                  <Route path=\"/\">\n                    <TimersView />\n                  </Route>\n                </Switch>\n            </Container>\n          </AppProvider>\n      </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}